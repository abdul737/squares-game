{"version":3,"sources":["constants/Routes.ts","constants/GameConstants.ts","constants/MappedLabels.ts","constants/BoardSizes.ts","utils/labelUtils.ts","utils/mediaQueries.ts","Hooks/useAutoSavedContext.ts","contexts/SettingsContext.tsx","contexts/GameContext.tsx","components/Tile.tsx","components/NavigationButton.tsx","components/AnimatedLogo.tsx","scenes/Board/Board.tsx","scenes/Menu/Menu.tsx","scenes/Settings/Settings.tsx","scenes/Instructions/Instructions.tsx","scenes/GameOptions/ChooseBoardSize.tsx","scenes/GameOptions/PlayerNames.tsx","scenes/GameOptions/GameOptions.tsx","Main.tsx","Providers.tsx","index.tsx"],"names":["ROUTES","Players","MAPPED_LABELS","resumeGame","startGame","settings","instructions","goBack","menu","save","cancel","chooseBoardSize","boardSize","x3","x4","x6","x8","BOARD_SIZES","value","label","getLabel","labelName","useMediaDown","breakpoint","theme","useTheme","useMediaQuery","breakpoints","down","useAutoSavedState","defaultState","contextName","useState","state","setState","useEffect","savedSettingsContext","localStorage","getItem","savedState","JSON","parse","setItem","stringify","SettingsContext","React","createContext","SettingsContextProvider","children","backgroundColor","playerNames","setBackgroundStyle","useCallback","backgroundStyle","palette","primary","main","grey","Provider","setBoardSize","setPlayerName","player","name","GameContext","defaultGameState","turn","PLAYER_1","GameContextProvider","useContext","squares","Array","from","performTurn","index","tempSquares","clone","PLAYER_2","restartGame","useStyles","makeStyles","paper","tileSize","height","width","textAlign","color","text","secondary","success","error","animationDuration","animationName","animationFillMode","getSquareClassName","replace","Tile","size","onClick","className","isMobileScreen","isSmallMobileScreen","useMemo","classes","Paper","undefined","menuButton","spacing","NavigationButton","path","variant","history","useHistory","Button","push","AnimatedLogo","Box","root","display","flexDirection","gameTurn","tileMargin","alignItems","marginBottom","marginLeft","turnTile","marginRight","turnLabel","contrastText","warning","light","navigationButton","marginTop","tileRow","tile","margin","Board","isGameOver","setIsGameOver","winner","setWinner","getPlayerSquares","i","usedIndexes","includes","getWinner","max","forEach","startIndex","count","every","square","tiles","reduce","store","rowIndex","Math","floor","Typography","map","row","j","MENU","menuItem","Menu","canResume","some","GAME","GAME_OPTIONS","SETTINGS","INSTRUCTIONS","buttons","justifyContent","flexWrap","settingsItem","Settings","Instructions","ChooseBoardSize","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","event","parseInt","target","FormControlLabel","control","Radio","inputs","PlayerNames","handleChange","TextField","button","GameOptions","mainContainer","Main","exact","Providers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAAYA,ECAAC,E,mGDAAD,K,SAAAA,E,6BAAAA,E,aAAAA,E,qBAAAA,E,8BAAAA,M,cCAAC,K,oBAAAA,E,qBAAAA,M,KCAL,IAAMC,EAAgB,CAC3BC,WAAY,cACZC,UAAW,iBACXC,SAAU,WACVC,aAAc,eACdC,OAAQ,UACRC,KAAM,OACNC,KAAM,OACNC,OAAQ,SACRC,gBAAiB,wBACjBC,UAAW,aACXC,GAAI,cACJC,GAAI,eACJC,GAAI,cACJC,GAAI,qBCTOC,EAAkC,CAC7C,CACEC,MAAO,EACPC,MAAO,MAET,CACED,MAAO,EACPC,MAAO,MAET,CACED,MAAO,EACPC,MAAO,MAET,CACED,MAAO,EACPC,MAAO,O,SClBEC,EAAW,SAACC,GACvB,OAAOnB,EAAcmB,I,iBCIVC,EAAe,SAACC,GAC3B,IAAMC,EAAQC,cACd,OAAOC,YAAcF,EAAMG,YAAYC,KAAKL,K,iBCDjCM,EAAoB,SAC/BC,EACAC,GACkD,IAAD,EACvBC,mBAAYF,GADW,mBAC1CG,EAD0C,KACnCC,EADmC,KAejD,OAZAC,qBAAU,WACR,IAAMC,EAAuBC,aAAaC,QAAQP,GAClD,GAAIK,EAAsB,CACxB,IAAMG,EAAaC,KAAKC,MAAML,GAC9BF,EAASK,MAEV,CAACR,IAEJI,qBAAU,WACRE,aAAaK,QAAQX,EAAaS,KAAKG,UAAUV,MAChD,CAACA,EAAOF,IAEJ,CAACE,EAAOC,I,OCPJU,EAAkBC,IAAMC,cAAc,IAEtCC,EAAoC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5CxB,EAAQC,cADmD,EAEvCI,EAAyC,CACjEoB,gBAAiB,GACjBrC,UAAWK,EAAY,GAAGC,MAC1BgC,YAAa,IACZ,mBAN8D,mBAE1DjB,EAF0D,KAEnDC,EAFmD,KAQ3DiB,EAAqBC,uBAAY,SAACC,GACtC,IAAIJ,EACJ,OAAOI,GACL,IAAK,UACHJ,EAAkBzB,EAAM8B,QAAQC,QAAQC,KACxC,MACF,IAAK,UACL,QACEP,EAAkBzB,EAAM8B,QAAQG,KAAK,KAEzCvB,GAAS,SAAAD,GAAK,kCACTA,GADS,IAEZgB,yBAED,CAACf,EAAUV,EAAM8B,QAAQC,QAAQC,KAAMhC,EAAM8B,QAAQG,OAkBxD,OAAO,cAACb,EAAgBc,SAAjB,CAA0BxC,MAAK,2BACjCe,GADiC,IAEpCkB,qBACAQ,aAnBmB,SAAC/C,GAAD,OACnBsB,GAAS,SAAAD,GAAK,kCACTA,GADS,IAEZrB,kBAiBFgD,cAdoB,SAACC,EAAiBC,GACtC5B,GAAS,SAAAD,GAAK,kCACTA,GADS,IAEZiB,YAAY,2BACPjB,EAAMiB,aADA,kBAERW,EAASC,YAKT,SAMJd,KChDQe,EAAclB,IAAMC,cAAc,IAEzCkB,EAAsC,CAC1CC,KAAMhE,EAAQiE,UAGHC,EAAgC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACtCpC,EAAcwD,qBAAWxB,GAAzBhC,UADqD,EAEnCiB,EAAiB,2BACtCmC,GADsC,IAEzCK,QAASC,MAAMC,KAAK,IAAID,MAAM1D,EAAYA,MACzC,eAL0D,mBAEtDqB,EAFsD,KAE/CC,EAF+C,KA0C7D,OAAO,cAAC6B,EAAYL,SAAb,CACLxC,MAAK,2BACAe,GADA,IAEHuC,YA1BgB,SAACC,GACnBvC,GAAS,SAAAD,GACP,IAAKA,EAAMoC,QAAQI,GAAQ,CACzB,IAAMC,EAAcC,YAAM1C,EAAMoC,SAEhC,OADAK,EAAYD,GAASxC,EAAMgC,KACpB,2BACFhC,GADL,IAEEoC,QAASK,EACTT,MApBYA,EAoBKhC,EAAMgC,KAnBzBA,IAAShE,EAAQiE,SACZjE,EAAQ2E,SAER3E,EAAQiE,YAJA,IAACD,EAuBhB,OAAOhC,MAgBP4C,YAZgB,WAClB3C,GAAS,SAAAD,GAAK,8CACTA,GACA+B,GAFS,IAGZK,QAASC,MAAMC,KAAK,IAAID,MAAM1D,EAAYA,YAIvC,SAOJoC,KC5DC8B,EAAYC,aAAyC,SAACvD,GAAD,MAAY,CACrEwD,MAAO,gBAAGC,EAAH,EAAGA,SAAH,MAAmB,CACxBC,OAAQD,EACRE,MAAOF,EACPG,UAAW,SACXC,MAAO7D,EAAM8B,QAAQgC,KAAKC,UAC1B,YAAa,CACXtC,gBAAiBzB,EAAM8B,QAAQkC,QAAQhC,MAEzC,YAAa,CACXP,gBAAiBzB,EAAM8B,QAAQmC,MAAMjC,MAEvC,gBAAiB,CACfkC,kBAAmB,QACnBC,cAAe,iBACfC,kBAAmB,WACnB,iBAAkB,CAChB3C,gBAAiBzB,EAAM8B,QAAQkC,QAAQhC,MAEzC,iBAAkB,CAChBP,gBAAiBzB,EAAM8B,QAAQmC,MAAMjC,aAMvCqC,EAAqB,SAAC3E,GAAD,OAAqBA,EAAQA,EAAM4E,QAAQ,KAAK,IAAM,SAEpEC,EAA6B,SAAC,GAAgD,IAA9CtB,EAA6C,EAA7CA,MAAOuB,EAAsC,EAAtCA,KAAM9E,EAAgC,EAAhCA,MAAO+E,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAChEtF,EAAcwD,qBAAWxB,GAAzBhC,UACAqD,EAASG,qBAAWL,GAApBE,KACFkC,EAAiB7E,EAAa,MAC9B8E,EAAsB9E,EAAa,KACnC2D,EAAWoB,mBACf,kBAAML,IAASG,EAAiBC,EAAsB,IAAMxF,EAAY,IAAMA,EAAY,IAAMA,KAChG,CAACoF,EAAMG,EAAgBC,EAAqBxF,IAGxC0F,EAAUxB,EAAU,CAAEG,aAK5B,OACE,cAACsB,EAAA,EAAD,CAAON,QAJW,WAClBA,QAAqBO,IAAV/B,GAAuBwB,EAAQxB,IAGbyB,UAAS,UAAKI,EAAQtB,MAAb,YAAsBa,EAAmB3E,GAAzC,iBAAwD+C,EAAK6B,QAAQ,KAAK,IAA1E,YAAiFI,M,gBC5CrHpB,EAAYC,aAAW,SAACvD,GAAD,MAAY,CACvCiF,WAAY,CACVtB,MAAO3D,EAAMkF,QAAQ,SAIZC,EAAqD,SAAC,GAO5D,IANLC,EAMI,EANJA,KACA5D,EAKI,EALJA,SACAiD,EAII,EAJJA,QAII,IAHJY,eAGI,MAHM,YAGN,MAFJb,YAEI,MAFG,QAEH,EADJX,EACI,EADJA,MAEMyB,EAAUC,cACVT,EAAUxB,IAOhB,OACE,cAACkC,EAAA,EAAD,CACEf,QAPgB,WAClBa,EAAQG,KAAKL,GACbX,GAAWA,KAMTC,UAAWI,EAAQG,WACnBI,QAASA,EACTb,KAAMA,EACNX,MAAOA,EALT,SAOGrC,KCvCMkE,EAAyB,WACpC,OAAO,eAACC,EAAA,EAAD,WACL,cAAC,EAAD,CAAMjG,MAAOjB,EAAQiE,WACrB,cAAC,EAAD,CAAMhD,MAAOjB,EAAQ2E,eCDnBE,EAAYC,aAA0C,SAACvD,GAAD,MAAY,CACtE4F,KAAM,CACJC,QAAS,OACTC,cAAe,UAEjBC,SAAU,gBAAGC,EAAH,EAAGA,WAAH,MAAqB,CAC7BH,QAAS,OACTI,WAAY,SACZC,aAAclG,EAAMkF,QAAQ,GAC5BiB,WAAYnG,EAAMkF,QAAQc,KAE5BI,SAAU,CACRC,YAAarG,EAAMkF,QAAQ,IAE7BoB,UAAW,CACTzC,MAAO7D,EAAM8B,QAAQC,QAAQwE,aAC7B,aAAc,CACZ1C,MAAO7D,EAAM8B,QAAQ0E,QAAQC,QAGjCC,iBAAkB,gBAAGV,EAAH,EAAGA,WAAH,MAAqB,CACrCW,UAAW3G,EAAMkF,QAAQ,GACzBiB,WAAYnG,EAAMkF,QAAQc,KAE5BY,QAAS,CACPf,QAAS,QAEXgB,KAAM,gBAAGb,EAAH,EAAGA,WAAH,MAAqB,CACzBc,OAAQ9G,EAAMkF,QAAQc,SAIbe,EAAkB,WAAO,IAAD,EACoBnE,qBAAWxB,GAA1DO,EAD2B,EAC3BA,mBAAoBvC,EADO,EACPA,UAAWsC,EADJ,EACIA,YADJ,EAEIkB,qBAAWL,GAA1CM,EAF2B,EAE3BA,QAASJ,EAFkB,EAElBA,KAAMO,EAFY,EAEZA,YACjB2B,EAAiB7E,EAAa,MAC9BgF,EAAUxB,EAAU,CAAE0C,WAAYrB,EAAiB,IAAO,KAJ7B,EAKCnE,oBAAS,GALV,mBAK5BwG,EAL4B,KAKhBC,EALgB,OAMPzG,mBAA2B,QANpB,mBAM5B0G,EAN4B,KAMpBC,EANoB,KAQnCxG,qBAAU,WACRgB,EAAmB,aAClB,CAACA,IAKJ,IAAMyF,EAAmBxF,uBACvB,SAACS,EAAiBQ,GAAuE,IAAvDwE,EAAsD,uDAA1C,EAAGC,EAAuC,uDAAf,GACvE,OAAIzE,EAAQwE,KAAOhF,GAAUiF,EAAYC,SAASF,GACzC,GAETC,EAAY7B,KAAK4B,GACV,IAAMA,EAAI,GAAKjI,IAAc,EAAI,EAAGgI,EAAiB/E,EAAQQ,EAASwE,EAAI,EAAGC,KAC9ED,EAAKjI,IAAc,EAAI,EAAIgI,EAAiB/E,EAAQQ,EAASwE,EAAI,EAAGC,IACtEF,EAAiB/E,EAAQQ,EAASwE,EAAIjI,EAAWkI,GACjDF,EAAiB/E,EAAQQ,EAASwE,EAAIjI,EAAWkI,MAEvD,CAAClI,IAKGoI,EAAY5F,uBAAY,WAAyB,IAAD,EAC9C6F,GAAG,mBACNhJ,EAAQiE,SAAW,GADb,cAENjE,EAAQ2E,SAAW,GAFb,GAUT,OANAP,EAAQ6E,SAAQ,SAACrF,EAAQsF,GACvB,IAAMC,EAAQR,EAAiB/E,EAAQQ,EAAS8E,GAC5CC,EAAQH,EAAIpF,KACdoF,EAAIpF,GAAUuF,MAGdH,EAAIhJ,EAAQiE,UAAY+E,EAAIhJ,EAAQ2E,UAC/B3E,EAAQiE,SACN+E,EAAIhJ,EAAQ2E,UAAYqE,EAAIhJ,EAAQiE,UACtCjE,EAAQ2E,SAEV,SACN,CAACP,EAASuE,IAEbzG,qBAAU,WACJkC,EAAQgF,OAAM,SAAAC,GAAM,QAAMA,OAC5BX,EAAUK,KACVP,GAAc,MAEf,CAACpE,EAAS2E,IAEb,IAAMO,EAAQlD,mBAAQ,kBAAMhC,EAAQmF,QAClC,SAACC,EAAOvI,EAAOuD,GACb,IAAMiF,EAAWC,KAAKC,MAAMnF,EAAM7D,GAMlC,OALK6I,EAAMC,GAGTD,EAAMC,GAAUzC,KAAK/F,GAFrBuI,EAAMC,GAAY,CAACxI,GAIduI,IAEX,MAAK,CAACpF,EAASzD,IAEf,OACE,eAACuG,EAAA,EAAD,CAAKjB,UAAWI,EAAQc,KAAxB,UACE,eAACD,EAAA,EAAD,CAAKjB,UAAWI,EAAQiB,SAAxB,UAEIiB,EACa,SAAXE,GAAqB,cAAC,EAAD,CAAMxC,UAAWI,EAAQsB,SAAU5B,KAAM,GAAI9E,MAAOwH,IACvE,cAAC,EAAD,CAAMxC,UAAWI,EAAQsB,SAAU5B,KAAM,GAAI9E,MAAO+C,IAE1D,cAAC4F,EAAA,EAAD,CAAYhD,QAAQ,KAAKX,UAAS,UAAKI,EAAQwB,UAAb,YAA0BU,GAAc,YAA1E,SAEIA,EACa,SAAXE,EAAA,UAAuBxF,EAAYwF,IAAWA,EAA9C,SAA8D,kBADtD,gBAEGxF,EAAYe,IAASA,QAIxC,cAACkD,EAAA,EAAD,UAEIoC,EAAMO,KAAI,SAACC,EAAKlB,GAAN,OACR,cAAC1B,EAAA,EAAD,CAAajB,UAAWI,EAAQ8B,QAAhC,SACG2B,EAAID,KAAI,SAAC5I,EAAO8I,GAAR,OACP,cAAC7C,EAAA,EAAD,CAAajB,UAAWI,EAAQ+B,KAAhC,SACE,cAAC,EAAD,CAEE5D,MAAOoE,EAAIjI,EAAYoJ,EACvB9I,MAAOA,EACP+E,QAASzB,GAJX,UACUqE,EADV,YACemB,KAFPA,OAFJnB,QAehB,cAAC1B,EAAA,EAAD,CAAKjB,UAAWI,EAAQ4B,iBAAxB,SACE,cAAC,EAAD,CAAkBtB,KAAM5G,EAAOiK,KAA/B,SAAsC7I,EAAS,gBCxIjD0D,EAAYC,aAAW,SAACvD,GAAD,MAAY,CACvChB,KAAM,CACJ6G,QAAS,OACTC,cAAe,UAEjB4C,SAAU,CACR/B,UAAW3G,EAAMkF,QAAQ,QAIhByD,EAAiB,WAAO,IAC3BhH,EAAuBiB,qBAAWxB,GAAlCO,mBACAkB,EAAYD,qBAAWL,GAAvBM,QACFiC,EAAUxB,IACVsF,EAAY/D,mBAAQ,kBAAMhC,EAAQgG,MAAK,SAAAf,GAAM,OAAIA,OAAS,CAACjF,IAMjE,OAJAlC,qBAAU,WACRgB,EAAmB,aAClB,CAACA,IAGF,eAACgE,EAAA,EAAD,CAAKjB,UAAWI,EAAQ9F,KAAxB,UACE,cAAC,EAAD,IAEE4J,GACA,cAACjD,EAAA,EAAD,CAAKjB,UAAWI,EAAQ4D,SAAxB,SACE,cAAC,EAAD,CAAkBtD,KAAM5G,EAAOsK,KAAMjF,MAAM,UAA3C,SACGjE,EAAS,kBAIhB,cAAC+F,EAAA,EAAD,CAAKjB,UAAWI,EAAQ4D,SAAxB,SACE,cAAC,EAAD,CAAkBtD,KAAM5G,EAAOuK,aAAclF,MAAO+E,EAAY,YAAc,UAA9E,SACGhJ,EAAS,iBAGd,cAAC+F,EAAA,EAAD,CAAKjB,UAAWI,EAAQ4D,SAAxB,SACE,cAAC,EAAD,CAAkBtD,KAAM5G,EAAOwK,SAA/B,SACGpJ,EAAS,gBAGd,cAAC+F,EAAA,EAAD,CAAKjB,UAAWI,EAAQ4D,SAAxB,SACE,cAAC,EAAD,CAAkBtD,KAAM5G,EAAOyK,aAA/B,SACGrJ,EAAS,wBC3Cd0D,EAAYC,aAAW,SAACvD,GAAD,MAAY,CACvC4F,KAAM,CACJC,QAAS,OACTC,cAAe,SACfG,WAAY,UAEdiD,QAAS,CACPrD,QAAS,OACTiB,OAAQ9G,EAAMkF,QAAQ,GACtBiE,eAAgB,SAChBC,SAAU,gBAEZC,aAAc,CACZvC,OAAQ9G,EAAMkF,QAAQ,QAIboE,EAAqB,WAAO,IAC/B3H,EAAuBiB,qBAAWxB,GAAlCO,mBACFmD,EAAUxB,IAMhB,OAJA3C,qBAAU,WACRgB,EAAmB,aAClB,CAACA,IAGF,cAACgE,EAAA,EAAD,CAAKjB,UAAWI,EAAQc,KAAxB,SACE,eAACD,EAAA,EAAD,CAAKjB,UAAWI,EAAQoE,QAAxB,UACE,cAACvD,EAAA,EAAD,CAAKjB,UAAWI,EAAQuE,aAAxB,SACE,cAAC,EAAD,CAAkBjE,KAAM5G,EAAOiK,KAA/B,SAAsC7I,EAAS,cAEjD,cAAC+F,EAAA,EAAD,CAAKjB,UAAWI,EAAQuE,aAAxB,SACE,cAAC,EAAD,CAAkBjE,KAAM5G,EAAOiK,KAAM5E,MAAM,UAA3C,SAAsDjE,EAAS,kBChC5D2J,EAAyB,WAAO,IACnC5H,EAAuBiB,qBAAWxB,GAAlCO,mBAMR,OAJAhB,qBAAU,WACRgB,EAAmB,aAClB,CAACA,IAEG,eAACgE,EAAA,EAAD,+BAGL,cAACA,EAAA,EAAD,UACI,cAAC,EAAD,CAAkBP,KAAM5G,EAAOiK,KAAM5E,MAAM,UAA3C,SAAsDjE,EAAS,kB,6CCZ1D4J,EAA4B,WAAO,IAAD,EACT5G,qBAAWxB,GAAvChC,EADqC,EACrCA,UAAW+C,EAD0B,EAC1BA,aAMnB,OACE,eAACsH,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACE,eAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,UAA+B9J,EAAS,aAAxC,OACA,cAACgK,EAAA,EAAD,CACEC,aAAYjK,EAAS,mBACrBF,MAAON,EACP0K,SAVe,SAACC,GACpB5H,EAAa6H,SAAUD,EAAME,OAA4BvK,SAMvD,SAMID,EAAY6I,KAAI,gBAAG5I,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACd,cAACuK,EAAA,EAAD,CAEExK,MAAOA,EACPyK,QAAS,cAACC,EAAA,EAAD,IACTzK,MAAOC,EAASD,IAHXA,Y,SCnBb2D,EAAYC,aAAW,SAACvD,GAAD,MAAY,CACvCqK,OAAQ,CACNxE,QAAS,OACTiB,OAAQ9G,EAAMkF,QAAQ,GACtBiE,eAAgB,SAChBC,SAAU,QAEZC,aAAc,CACZvC,OAAQ9G,EAAMkF,QAAQ,QAIboF,EAAwB,WAAO,IAAD,EACF1H,qBAAWxB,GAA1CM,EADiC,EACjCA,YAAaU,EADoB,EACpBA,cACf0C,EAAUxB,IAEViH,EAAe,SAACR,GAAgD,IAAD,EAC3CA,EAAME,OAAtB3H,EAD2D,EAC3DA,KAAM5C,EADqD,EACrDA,MACd0C,EAAcE,EAAiB5C,IAGjC,OACE,eAACiG,EAAA,EAAD,CAAKjB,UAAWI,EAAQuF,OAAxB,UACE,cAAC1E,EAAA,EAAD,CAAKjB,UAAWI,EAAQuE,aAAxB,SACE,cAACmB,EAAA,EAAD,CACElI,KAAM7D,EAAQiE,SACd/C,MAAOlB,EAAQiE,SACf2C,QAAQ,WACR3F,MAAOgC,EAAYjD,EAAQiE,UAC3BoH,SAAUS,MAGd,cAAC5E,EAAA,EAAD,CAAKjB,UAAWI,EAAQuE,aAAxB,SACE,cAACmB,EAAA,EAAD,CACElI,KAAM7D,EAAQ2E,SACdzD,MAAOlB,EAAQ2E,SACfiC,QAAQ,WACR3F,MAAOgC,EAAYjD,EAAQ2E,UAC3B0G,SAAUS,UClCdjH,GAAYC,aAAW,SAACvD,GAAD,MAAY,CACvC4F,KAAM,CACJC,QAAS,OACTC,cAAe,SACfG,WAAY,UAEdiD,QAAS,CACPrD,QAAS,OACTiB,OAAQ9G,EAAMkF,QAAQ,GACtBiE,eAAgB,SAChBC,SAAU,gBAEZqB,OAAQ,CACN3D,OAAQ9G,EAAMkF,QAAQ,QAIbwF,GAAwB,WAAO,IAClC/I,EAAuBiB,qBAAWxB,GAAlCO,mBACA0B,EAAgBT,qBAAWL,GAA3Bc,YACFyB,EAAUxB,KAMhB,OAJA3C,qBAAU,WACRgB,EAAmB,aAClB,CAACA,IAGF,eAACgE,EAAA,EAAD,CAAKjB,UAAWI,EAAQc,KAAxB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,eAACD,EAAA,EAAD,CAAKjB,UAAWI,EAAQoE,QAAxB,UACE,cAACvD,EAAA,EAAD,CAAKjB,UAAWI,EAAQ2F,OAAxB,SACE,cAAC,EAAD,CAAkBrF,KAAM5G,EAAOiK,KAA/B,SAAsC7I,EAAS,cAEjD,cAAC+F,EAAA,EAAD,CAAKjB,UAAWI,EAAQ2F,OAAxB,SACE,cAAC,EAAD,CAAkBhG,QAASpB,EAAa+B,KAAM5G,EAAOsK,KAAMjF,MAAM,UAAjE,SAA4EjE,EAAS,wBCpCzF0D,GAAYC,aAA+C,SAACvD,GAAD,MAAY,CAC3E2K,cAAe,kBAA0B,CACvC9E,QAAS,OACTnC,OAAQ,OACRC,MAAO,OACPsC,WAAY,SACZkD,eAAgB,SAChB1H,gBANa,EAAGA,sBAyBLmJ,GAfQ,WAAO,IACpBnJ,EAAoBmB,qBAAWxB,GAA/BK,gBACFqD,EAAUxB,GAAU,CAAE7B,oBAE5B,OACE,eAACkE,EAAA,EAAD,CAAKjB,UAAWI,EAAQ6F,cAAxB,UACE,cAAC,IAAD,CAAOE,OAAK,EAACzF,KAAM5G,EAAOiK,KAAMiB,UAAWf,IAC3C,cAAC,IAAD,CAAOkC,OAAK,EAACzF,KAAM5G,EAAOuK,aAAcW,UAAWgB,KACnD,cAAC,IAAD,CAAOG,OAAK,EAACzF,KAAM5G,EAAOsK,KAAMY,UAAW3C,IAC3C,cAAC,IAAD,CAAO8D,OAAK,EAACzF,KAAM5G,EAAOwK,SAAUU,UAAWJ,IAC/C,cAAC,IAAD,CAAOuB,OAAK,EAACzF,KAAM5G,EAAOyK,aAAcS,UAAWH,Q,SCzB5CuB,GAAsB,SAAC,GAAkB,IAAhBtJ,EAAe,EAAfA,SACpC,OACE,cAAC,KAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACGA,SCFXuJ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.4d0084c9.chunk.js","sourcesContent":["export enum ROUTES {\n  MENU = '/',\n  GAME_OPTIONS = '/game-options',\n  GAME = '/game',\n  SETTINGS = '/settings',\n  INSTRUCTIONS = '/instructions',\n}","export enum Players {\n  PLAYER_1 = 'Player 1',\n  PLAYER_2 = 'Player 2',\n}","export const MAPPED_LABELS = {\n  resumeGame: 'Resume game',\n  startGame: 'Start new game',\n  settings: 'Settings',\n  instructions: 'Instructions',\n  goBack: 'Go back',\n  menu: 'Menu',\n  save: 'Save',\n  cancel: 'Cancel',\n  chooseBoardSize: 'Choose the board size',\n  boardSize: 'Board size',\n  x3: 'Small (3x3)',\n  x4: 'Medium (4x4)',\n  x6: 'Large (6x6)',\n  x8: 'Extra Large (8x8)',\n}","interface IBoardSizeObject {\n  value: number;\n  label: 'x3' | 'x4'| 'x6' | 'x8';\n}\n\nexport const BOARD_SIZES: IBoardSizeObject[] = [\n  {\n    value: 3,\n    label: 'x3',\n  },\n  {\n    value: 4,\n    label: 'x4',\n  },\n  {\n    value: 6,\n    label: 'x6',\n  },\n  {\n    value: 8,\n    label: 'x8',\n  },\n];","import { MAPPED_LABELS } from '../constants'\n\nexport const getLabel = (labelName: keyof typeof MAPPED_LABELS): string => {\n  return MAPPED_LABELS[labelName];\n}","import { useMediaQuery, useTheme } from \"@material-ui/core\";\n\nexport const useMediaUp = (breakpoint: number | 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.up(breakpoint));\n};\n\nexport const useMediaDown = (breakpoint: number | 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.down(breakpoint));\n};","import { useEffect, useState } from 'react'\n\n/**\n * Overrides useState hook, and automatically saves its state in the localStorage\n * @param defaultState - default value for the useState\n * @param contextName - used in as key in localStorage\n * @returns [state, setState]\n */\nexport const useAutoSavedState = <S>(\n  defaultState: S | (() => S),\n  contextName: 'GameContext' | 'SettingsContext'\n): [S, React.Dispatch<React.SetStateAction<S>>] => {\n  const [state, setState] = useState<S>(defaultState);\n\n  useEffect(() => {\n    const savedSettingsContext = localStorage.getItem(contextName)\n    if (savedSettingsContext) {\n      const savedState = JSON.parse(savedSettingsContext)\n      setState(savedState)\n    }\n  }, [contextName]);\n\n  useEffect(() => {\n    localStorage.setItem(contextName, JSON.stringify(state))\n  }, [state, contextName]);\n\n  return [state, setState];\n}","import { useTheme } from \"@material-ui/core\";\nimport React, { useCallback } from \"react\"\nimport { BOARD_SIZES, Players } from \"../constants\";\nimport { useAutoSavedState } from \"../Hooks\";\n\ntype backgroundStyleType = 'primary' | 'default'\n\ninterface ISettingsContextState {\n  backgroundColor: string;\n  boardSize: number;\n  playerNames: { [key in Players]?: string; }\n}\n\ninterface ISettingsContextValue extends ISettingsContextState {\n  setBackgroundStyle: (backgroundStyle?: backgroundStyleType) => void;\n  setBoardSize: (value: number) => void;\n  setPlayerName: (player: Players, name: string) => void;\n}\n\nexport const SettingsContext = React.createContext({} as ISettingsContextValue);\n\nexport const SettingsContextProvider: React.FC = ({ children }) => {\n  const theme = useTheme();\n  const [state, setState] = useAutoSavedState<ISettingsContextState>({\n    backgroundColor: '',\n    boardSize: BOARD_SIZES[1].value,\n    playerNames: {},\n  }, 'SettingsContext');\n\n  const setBackgroundStyle = useCallback((backgroundStyle?: backgroundStyleType) => {\n    let backgroundColor: string\n    switch(backgroundStyle) {\n      case 'primary':\n        backgroundColor = theme.palette.primary.main;\n        break;\n      case 'default':\n      default:\n        backgroundColor = theme.palette.grey[400]\n    }\n    setState(state => ({\n      ...state,\n      backgroundColor,\n    }))\n  }, [setState, theme.palette.primary.main, theme.palette.grey])\n\n  const setBoardSize = (boardSize: number) =>\n    setState(state => ({\n      ...state,\n      boardSize,\n    }));\n\n  const setPlayerName = (player: Players, name: string) =>{\n    setState(state => ({\n      ...state,\n      playerNames: {\n        ...state.playerNames,\n        [player]: name,\n      },\n    }));\n  }\n\n  return <SettingsContext.Provider value={{\n    ...state,\n    setBackgroundStyle,\n    setBoardSize,\n    setPlayerName,\n    }}>\n    {children}\n  </SettingsContext.Provider>\n}\n","import React, { useContext } from \"react\"\nimport { clone } from \"lodash-es\";\nimport { Players } from \"../constants\"\nimport { SettingsContext } from \"./SettingsContext\";\nimport { useAutoSavedState } from \"../Hooks\";\n\ninterface IDefaultGameState {\n  turn: Players;\n}\n\ninterface IGameContextState extends IDefaultGameState {\n  squares: Players[];\n}\n\ninterface IGameContextValue extends IGameContextState {\n  performTurn: (index: number) => void;\n  restartGame: () => void;\n}\n\nexport const GameContext = React.createContext({} as IGameContextValue);\n\nconst defaultGameState: IDefaultGameState = {\n  turn: Players.PLAYER_1,\n}\n\nexport const GameContextProvider: React.FC = ({ children }) => {\n  const { boardSize } = useContext(SettingsContext);\n  const [state, setState] = useAutoSavedState<IGameContextState>({\n    ...defaultGameState,\n    squares: Array.from(new Array(boardSize * boardSize)),\n  }, 'GameContext');\n\n  const toggleTurn = (turn: Players): Players => {\n    if (turn === Players.PLAYER_1) {\n      return Players.PLAYER_2\n    } else {\n      return Players.PLAYER_1\n    }\n  }\n\n  /**\n   * Performs player move, e.g. on clicking the tile\n   * @param index put current player's move in this position\n   */\n  const performTurn = (index: number) => {\n    setState(state => {\n      if (!state.squares[index]) {\n        const tempSquares = clone(state.squares);\n        tempSquares[index] = state.turn;\n        return {\n          ...state,\n          squares: tempSquares,\n          turn: toggleTurn(state.turn),\n        }\n      }\n      return state\n    })\n  }\n\n  const restartGame = () => {\n    setState(state => ({\n      ...state,\n      ...defaultGameState,\n      squares: Array.from(new Array(boardSize * boardSize)),\n    }));\n  }\n\n  return <GameContext.Provider\n    value={{\n      ...state,\n      performTurn,\n      restartGame,\n    }}\n  >\n    {children}\n  </GameContext.Provider>\n}\n","import React, { useContext, useMemo } from \"react\";\nimport { Paper, makeStyles, Theme } from \"@material-ui/core\";\nimport { Players } from \"../constants\";\nimport { useMediaDown } from \"../utils\";\nimport { GameContext, SettingsContext } from \"../contexts\";\n\ninterface ITileProps {\n  index?: number;\n  size?: number;\n  value?: Players;\n  onClick?: (index: number) => void;\n  className?: string;\n}\n\nconst useStyles = makeStyles<Theme, { tileSize: number; }>((theme) => ({\n  paper: ({ tileSize }) => ({\n    height: tileSize,\n    width: tileSize,\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    '&.Player1': {\n      backgroundColor: theme.palette.success.main,\n    },\n    '&.Player2': {\n      backgroundColor: theme.palette.error.main,\n    },\n    '&.empty:hover': {\n      animationDuration: '200ms',\n      animationName: 'emptyTileHover',\n      animationFillMode: 'forwards',\n      '&.turn-Player1': {\n        backgroundColor: theme.palette.success.main,\n      },\n      '&.turn-Player2': {\n        backgroundColor: theme.palette.error.main,\n      },\n    },\n  }),\n}));\n\nconst getSquareClassName = (value?: Players) => value ? value.replace(/ /g,'') : 'empty'\n\nexport const Tile: React.FC<ITileProps> = ({ index, size, value, onClick, className }) => {\n  const { boardSize } = useContext(SettingsContext);\n  const { turn } = useContext(GameContext);\n  const isMobileScreen = useMediaDown('xs');\n  const isSmallMobileScreen = useMediaDown(345);\n  const tileSize = useMemo(\n    () => size || (isMobileScreen ? isSmallMobileScreen ? 245 / boardSize : 300 / boardSize : 530 / boardSize),\n    [size, isMobileScreen, isSmallMobileScreen, boardSize]\n  )\n\n  const classes = useStyles({ tileSize });\n\n  const handleClick = () => {\n    onClick && index !== undefined && onClick(index)\n  }\n  return (\n    <Paper onClick={handleClick} className={`${classes.paper} ${getSquareClassName(value)} turn-${turn.replace(/ /g,'')} ${className}`}></Paper>\n  )\n}","import React from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\nimport { ROUTES } from \"../constants\";\n\ninterface INavigationButtonProps {\n  path: ROUTES;\n  children: React.ReactNode;\n  onClick?: () => void\n  variant?: \"text\" | \"outlined\" | \"contained\";\n  size?: \"medium\" | \"large\" | \"small\";\n  color?: \"inherit\" | \"primary\" | \"secondary\" | \"default\";\n}\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    width: theme.spacing(25),\n  },\n}))\n\nexport const NavigationButton: React.FC<INavigationButtonProps> = ({\n  path,\n  children,\n  onClick,\n  variant = 'contained',\n  size = 'large',\n  color,\n}) => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  const handleClick = () => {\n    history.push(path)\n    onClick && onClick()\n  }\n\n  return (\n    <Button\n      onClick={handleClick}\n      className={classes.menuButton}\n      variant={variant}\n      size={size}\n      color={color}\n    >\n      {children}\n    </Button>\n  )\n}","import { Box } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Players } from \"../constants\";\nimport { Tile } from \"./Tile\";\n\nexport const AnimatedLogo: React.FC = () => {\n  return <Box>\n    <Tile value={Players.PLAYER_1}/>\n    <Tile value={Players.PLAYER_2}/>\n  </Box>\n}","import React, { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { makeStyles, Theme, Typography, Box } from '@material-ui/core'\nimport { Players, ROUTES } from \"../../constants\";\nimport { NavigationButton, Tile } from \"../../components\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\nimport { getLabel, useMediaDown } from \"../../utils\";\n\nconst useStyles = makeStyles<Theme, { tileMargin: number }>((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  gameTurn: ({ tileMargin }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(tileMargin),\n  }),\n  turnTile: {\n    marginRight: theme.spacing(2),\n  },\n  turnLabel: {\n    color: theme.palette.primary.contrastText,\n    '&.gameOver': {\n      color: theme.palette.warning.light,\n    },\n  },\n  navigationButton: ({ tileMargin }) => ({\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(tileMargin),\n  }),\n  tileRow: {\n    display: 'flex'\n  },\n  tile: ({ tileMargin }) => ({\n    margin: theme.spacing(tileMargin),\n  }),\n}));\n\nexport const Board: React.FC = () => {\n  const { setBackgroundStyle, boardSize, playerNames } = useContext(SettingsContext);\n  const { squares, turn, performTurn } = useContext(GameContext);\n  const isMobileScreen = useMediaDown('xs');\n  const classes = useStyles({ tileMargin: isMobileScreen ? 0.25 : 0.50 });\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winner, setWinner] = useState<Players | 'Draw'>('Draw')\n\n  useEffect(() => {\n    setBackgroundStyle('primary');\n  }, [setBackgroundStyle])\n\n  /**\n   * Counts connected squares of the given player, starting from index i\n   */\n  const getPlayerSquares = useCallback(\n    (player: Players, squares: any[], i: number = 0, usedIndexes: number[] = []): number => {\n      if (squares[i] !== player || usedIndexes.includes(i)) {\n        return 0;\n      }\n      usedIndexes.push(i)\n      return 1 + ((i + 1) % boardSize === 0 ? 0: getPlayerSquares(player, squares, i + 1, usedIndexes))\n        + ((i) % boardSize === 0 ? 0 : getPlayerSquares(player, squares, i - 1, usedIndexes))\n        + getPlayerSquares(player, squares, i - boardSize, usedIndexes)\n        + getPlayerSquares(player, squares, i + boardSize, usedIndexes)\n    }\n  , [boardSize]);\n\n  /**\n   * Finds winner or draw\n   */\n  const getWinner = useCallback((): Players | 'Draw' => {\n    const max = {\n      [Players.PLAYER_1]: 0,\n      [Players.PLAYER_2]: 0,\n    }\n    squares.forEach((player, startIndex) => {\n      const count = getPlayerSquares(player, squares, startIndex);\n      if (count > max[player]) {\n        max[player] = count;\n      }\n    })\n    if (max[Players.PLAYER_1] > max[Players.PLAYER_2]) {\n      return Players.PLAYER_1;\n    } else if (max[Players.PLAYER_2] > max[Players.PLAYER_1]) {\n      return Players.PLAYER_2;\n    }\n    return 'Draw'\n  }, [squares, getPlayerSquares])\n\n  useEffect(() => {\n    if (squares.every(square => !!square)) {\n      setWinner(getWinner())\n      setIsGameOver(true)\n    }\n  }, [squares, getWinner])\n\n  const tiles = useMemo(() => squares.reduce<Players[][]>(\n    (store, value, index) => {\n      const rowIndex = Math.floor(index/boardSize);\n      if (!store[rowIndex]) {\n        store[rowIndex] = [value]\n      } else {\n        store[rowIndex].push(value)\n      }\n      return store\n    },\n  []), [squares, boardSize])\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.gameTurn}>\n        {\n          isGameOver ?\n            winner !== 'Draw' && <Tile className={classes.turnTile} size={34} value={winner}/>\n            : <Tile className={classes.turnTile} size={34} value={turn}/>\n        }\n        <Typography variant=\"h4\" className={`${classes.turnLabel} ${isGameOver && 'gameOver'}`}>\n          {\n            isGameOver ?\n              winner !== 'Draw' ? `${playerNames[winner] || winner} won!` : 'Game over, Draw'\n              : `Turn: ${playerNames[turn] || turn}`\n          }\n        </Typography>\n      </Box>\n      <Box>\n        {\n          tiles.map((row, i) => (\n            <Box key={i} className={classes.tileRow}>\n              {row.map((value, j) => (\n                <Box key={j} className={classes.tile}>\n                  <Tile\n                    key={`${i}-${j}`}\n                    index={i * boardSize + j}\n                    value={value}\n                    onClick={performTurn}\n                  />\n                </Box>\n              ))}\n            </Box>\n          ))\n        }\n      </Box>\n      <Box className={classes.navigationButton}>\n        <NavigationButton path={ROUTES.MENU}>{getLabel('menu')}</NavigationButton>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect, useMemo } from \"react\";\nimport { makeStyles, Box } from \"@material-ui/core\";\nimport { AnimatedLogo, NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { getLabel } from \"../../utils\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles((theme) => ({\n  menu: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  menuItem: {\n    marginTop: theme.spacing(1)\n  },\n}))\n\nexport const Menu: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n  const { squares } = useContext(GameContext)\n  const classes = useStyles();\n  const canResume = useMemo(() => squares.some(square => square), [squares]);\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.menu}>\n      <AnimatedLogo />\n      {\n        canResume &&\n        <Box className={classes.menuItem}>\n          <NavigationButton path={ROUTES.GAME} color=\"primary\">\n            {getLabel('resumeGame')}\n          </NavigationButton>\n        </Box>\n      }\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.GAME_OPTIONS} color={canResume ? 'secondary' : 'primary'}>\n          {getLabel('startGame')}\n        </NavigationButton>\n      </Box>\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.SETTINGS}>\n          {getLabel('settings')}\n        </NavigationButton>\n      </Box>\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.INSTRUCTIONS}>\n          {getLabel('instructions')}\n        </NavigationButton>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect } from \"react\";\nimport { makeStyles, Box } from \"@material-ui/core\";\nimport { ROUTES } from \"../../constants\";\nimport { NavigationButton } from \"../../components\";\nimport { getLabel } from \"../../utils\";\nimport { SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap-reverse',\n  },\n  settingsItem: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const Settings: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n  const classes = useStyles();\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.buttons}>\n        <Box className={classes.settingsItem}>\n          <NavigationButton path={ROUTES.MENU}>{getLabel('cancel')}</NavigationButton>\n        </Box>\n        <Box className={classes.settingsItem}>\n          <NavigationButton path={ROUTES.MENU} color=\"primary\">{getLabel('save')}</NavigationButton>\n        </Box>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { getLabel } from \"../../utils\";\nimport { SettingsContext } from \"../../contexts\";\n\nexport const Instructions: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return <Box>\n    Instructions page\n\n    <Box>\n        <NavigationButton path={ROUTES.MENU} color=\"primary\">{getLabel('goBack')}</NavigationButton>\n      </Box>\n  </Box>\n}","import React, { useContext } from \"react\";\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from \"@material-ui/core\";\nimport { BOARD_SIZES } from \"../../constants\";\nimport { SettingsContext } from \"../../contexts\";\nimport { getLabel } from \"../../utils\";\n\nexport const ChooseBoardSize: React.FC = () => {\n  const { boardSize, setBoardSize } = useContext(SettingsContext);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBoardSize(parseInt((event.target as HTMLInputElement).value));\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{getLabel('boardSize')}:</FormLabel>\n      <RadioGroup\n        aria-label={getLabel('chooseBoardSize')}\n        value={boardSize}\n        onChange={handleChange}\n      >\n        {\n          BOARD_SIZES.map(({ value, label }) => (\n            <FormControlLabel\n              key={label}\n              value={value}\n              control={<Radio />}\n              label={getLabel(label)}\n            />\n          ))\n        }\n      </RadioGroup>\n    </FormControl>\n  )\n}","import React, { useContext } from \"react\";\nimport { Box, makeStyles, TextField } from \"@material-ui/core\";\nimport { Players } from \"../../constants\";\nimport { SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputs: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  settingsItem: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const PlayerNames: React.FC = () => {\n  const { playerNames, setPlayerName } = useContext(SettingsContext);\n  const classes = useStyles();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target as HTMLInputElement;\n    setPlayerName(name as Players, value);\n  }\n\n  return (\n    <Box className={classes.inputs}>\n      <Box className={classes.settingsItem}>\n        <TextField\n          name={Players.PLAYER_1}\n          label={Players.PLAYER_1}\n          variant=\"outlined\"\n          value={playerNames[Players.PLAYER_1]}\n          onChange={handleChange}\n        />\n      </Box>\n      <Box className={classes.settingsItem}>\n        <TextField\n          name={Players.PLAYER_2}\n          label={Players.PLAYER_2}\n          variant=\"outlined\"\n          value={playerNames[Players.PLAYER_2]}\n          onChange={handleChange}\n        />\n      </Box>\n    </Box>\n  )\n}","import { Box, makeStyles } from \"@material-ui/core\";\nimport React, { useContext, useEffect } from \"react\";\nimport { NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\nimport { getLabel } from \"../../utils\";\nimport { ChooseBoardSize } from \"./ChooseBoardSize\";\nimport { PlayerNames } from \"./PlayerNames\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap-reverse',\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const GameOptions: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n  const { restartGame } = useContext(GameContext)\n  const classes = useStyles();\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.root}>\n      <ChooseBoardSize />\n      <PlayerNames />\n      <Box className={classes.buttons}>\n        <Box className={classes.button}>\n          <NavigationButton path={ROUTES.MENU}>{getLabel('goBack')}</NavigationButton>\n        </Box>\n        <Box className={classes.button}>\n          <NavigationButton onClick={restartGame} path={ROUTES.GAME} color=\"primary\">{getLabel('startGame')}</NavigationButton>\n        </Box>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext } from 'react';\nimport { Box, makeStyles, Theme } from '@material-ui/core';\nimport { Board, Menu, Settings, Instructions } from './scenes';\nimport { Route } from 'react-router';\nimport { SettingsContext } from './contexts';\nimport { GameOptions } from './scenes/GameOptions';\nimport { ROUTES } from './constants'\n\nconst useStyles = makeStyles<Theme, { backgroundColor: string }>((theme) => ({\n  mainContainer: ({ backgroundColor }) => ({\n    display: 'flex',\n    height: '100%',\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor,\n  })\n}));\n\nconst Main: React.FC = () => {\n  const { backgroundColor } = useContext(SettingsContext);\n  const classes = useStyles({ backgroundColor });\n\n  return (\n    <Box className={classes.mainContainer}>\n      <Route exact path={ROUTES.MENU} component={Menu}/>\n      <Route exact path={ROUTES.GAME_OPTIONS} component={GameOptions}/>\n      <Route exact path={ROUTES.GAME} component={Board}/>\n      <Route exact path={ROUTES.SETTINGS} component={Settings}/>\n      <Route exact path={ROUTES.INSTRUCTIONS} component={Instructions}/>\n    </Box>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport { HashRouter as Router } from 'react-router-dom'\nimport { GameContextProvider, SettingsContextProvider } from \"./contexts\";\n\nexport const Providers: React.FC = ({ children }) => {\n  return (\n    <Router>\n      <SettingsContextProvider>\n        <GameContextProvider>\n          {children}\n        </GameContextProvider>\n      </SettingsContextProvider>\n    </Router>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './animations';\nimport Main from './Main';\nimport { Providers } from './Providers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <Main />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}