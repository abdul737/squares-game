{"version":3,"sources":["constants/Routes.ts","constants/GameConstants.ts","constants/MappedLabels.ts","constants/BoardSizes.ts","constants/PlayerColorSchemes.ts","utils/labelUtils.ts","utils/mediaQueries.ts","Hooks/useAutoSavedContext.ts","contexts/SettingsContext.tsx","contexts/GameContext.tsx","components/Tile.tsx","components/NavigationButton.tsx","components/LogoTiles.tsx","scenes/Game/GameOverOverlay.tsx","scenes/Game/Board.tsx","scenes/Game/Game.tsx","scenes/Menu/Menu.tsx","scenes/Settings/Settings.tsx","scenes/Instructions/Instructions.tsx","scenes/GameOptions/ChooseBoardSize.tsx","scenes/GameOptions/PlayerNames.tsx","scenes/GameOptions/GameOptions.tsx","Main.tsx","Providers.tsx","index.tsx"],"names":["ROUTES","Players","MAPPED_LABELS","resumeGame","startGame","playAgain","settings","instructions","goBack","menu","save","cancel","chooseBoardSize","boardSize","colorScheme","x3","x4","x6","x8","BOARD_SIZES","value","label","PLAYER_COLOR_SCHEMES","PLAYER_1","PLAYER_2","getLabel","labelName","useMediaDown","breakpoint","theme","useTheme","useMediaQuery","breakpoints","down","useAutoSavedState","defaultState","contextName","useState","state","setState","useEffect","savedSettingsContext","localStorage","getItem","savedState","JSON","parse","setItem","stringify","defaultSettings","backgroundColor","playerNames","playerColorScheme","SettingsContext","React","createContext","SettingsContextProvider","children","setBackgroundStyle","useCallback","backgroundStyle","palette","primary","main","grey","Provider","setBoardSize","setPlayerNames","setPlayerColorScheme","GameContext","defaultGameState","turn","isGameOver","winner","GameContextProvider","useContext","squares","Array","from","getPlayerSquares","player","i","usedIndexes","includes","push","getWinner","max","forEach","startIndex","count","every","square","startNewGame","a","restartGame","performTurn","index","tempSquares","clone","useStyles","makeStyles","paper","tileSize","nextColor","tileColor","height","width","textAlign","color","text","secondary","common","white","animationDuration","animationName","animationFillMode","Tile","size","onClick","className","isMobileScreen","isSmallMobileScreen","useMemo","classes","Paper","undefined","menuButton","spacing","NavigationButton","path","variant","history","useHistory","Button","root","animate","display","justifyContent","alignItems","position","Math","sqrt","leftTile","animation","rightTile","LogoTiles","hideTitle","Box","mb","Typography","align","gameTurn","marginBottom","turnTile","marginRight","turnLabel","contrastText","warning","light","navigationButton","marginTop","boardOverlay","left","top","right","bottom","zIndex","background","overlayContent","flexDirection","GameOverOverlay","MENU","tileRow","tileContainer","tileMargin","margin","Board","tiles","reduce","store","rowIndex","floor","map","row","j","marginLeft","Game","menuItem","Menu","canResume","some","GAME","GAME_OPTIONS","SETTINGS","INSTRUCTIONS","buttons","flexWrap","settingsItem","colorChooseItem","padding","Settings","findIndex","isEqual","colorSchemeIndex","setColorSchemeIndex","mt","mr","FormLabel","component","Instructions","ChooseBoardSize","RadioGroup","aria-label","onChange","event","parseInt","target","FormControlLabel","control","Radio","inputs","PlayerNames","setPlayerName","handleChange","name","TextField","button","GameOptions","savedPlayerNames","mainContainer","overflow","minHeight","Main","exact","Providers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5efb0653.chunk.js","sourcesContent":["export enum ROUTES {\n  MENU = '/',\n  GAME_OPTIONS = '/game-options',\n  GAME = '/game',\n  SETTINGS = '/settings',\n  INSTRUCTIONS = '/instructions',\n}","export enum Players {\n  PLAYER_1 = 'Player 1',\n  PLAYER_2 = 'Player 2',\n}","export const MAPPED_LABELS = {\n  resumeGame: 'Resume game',\n  startGame: 'Start new game',\n  playAgain: 'Play again',\n  settings: 'Settings',\n  instructions: 'Instructions',\n  goBack: 'Go back',\n  menu: 'Menu',\n  save: 'Save',\n  cancel: 'Cancel',\n  chooseBoardSize: 'Choose the board size',\n  boardSize: 'Board size',\n  colorScheme: 'Color scheme',\n  x3: 'Small (3x3)',\n  x4: 'Medium (4x4)',\n  x6: 'Large (6x6)',\n  x8: 'Extra Large (8x8)',\n}","interface IBoardSizeObject {\n  value: number;\n  label: 'x3' | 'x4'| 'x6' | 'x8';\n}\n\nexport const BOARD_SIZES: IBoardSizeObject[] = [\n  {\n    value: 3,\n    label: 'x3',\n  },\n  {\n    value: 4,\n    label: 'x4',\n  },\n  {\n    value: 6,\n    label: 'x6',\n  },\n  {\n    value: 8,\n    label: 'x8',\n  },\n];","import { PlayerColorSchemeType } from \"../contexts\";\nimport { Players } from \"./GameConstants\";\n\nexport const PLAYER_COLOR_SCHEMES: PlayerColorSchemeType[] = [\n  {\n    [Players.PLAYER_1]: '#f44336',\n    [Players.PLAYER_2]: '#4caf50',\n  },\n  {\n    [Players.PLAYER_1]: '#aa00ff',\n    [Players.PLAYER_2]: '#00bfa5',\n  },\n  {\n    [Players.PLAYER_1]: '#ffd600',\n    [Players.PLAYER_2]: '#00c853',\n  },\n  {\n    [Players.PLAYER_1]: '#00b8d4',\n    [Players.PLAYER_2]: '#ff6f00',\n  },\n];","import { MAPPED_LABELS } from '../constants'\n\nexport const getLabel = (labelName: keyof typeof MAPPED_LABELS): string => {\n  return MAPPED_LABELS[labelName];\n}","import { useMediaQuery, useTheme } from \"@material-ui/core\";\n\nexport const useMediaUp = (breakpoint: number | 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.up(breakpoint));\n};\n\nexport const useMediaDown = (breakpoint: number | 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.down(breakpoint));\n};","import { useEffect, useState } from 'react'\n\n/**\n * Overrides useState hook, and automatically saves its state in the localStorage\n * @param defaultState - default value for the useState\n * @param contextName - used in as key in localStorage\n * @returns [state, setState]\n */\nexport const useAutoSavedState = <S>(\n  defaultState: S | (() => S),\n  contextName: 'GameContext' | 'SettingsContext'\n): [S, React.Dispatch<React.SetStateAction<S>>] => {\n  const [state, setState] = useState<S>(defaultState);\n\n  useEffect(() => {\n    const savedSettingsContext = localStorage.getItem(contextName)\n    if (savedSettingsContext) {\n      const savedState = JSON.parse(savedSettingsContext)\n      setState(savedState)\n    }\n  }, [contextName]);\n\n  useEffect(() => {\n    localStorage.setItem(contextName, JSON.stringify(state))\n  }, [state, contextName]);\n\n  return [state, setState];\n}","import { useTheme } from \"@material-ui/core\";\nimport React, { useCallback } from \"react\"\nimport { BOARD_SIZES, Players, PLAYER_COLOR_SCHEMES } from \"../constants\";\nimport { useAutoSavedState } from \"../Hooks\";\n\ntype BackgroundStyleType = 'primary' | 'default'\n\nexport type PlayerNamesType = { [key in Players]?: string; }\nexport type PlayerColorSchemeType = { [key in Players]: string; }\n\ninterface ISettingsContextState {\n  backgroundColor: string;\n  boardSize: number;\n  playerNames: PlayerNamesType;\n  playerColorScheme: PlayerColorSchemeType;\n}\n\ninterface ISettingsContextValue extends ISettingsContextState {\n  setBackgroundStyle: (backgroundStyle?: BackgroundStyleType) => void;\n  setBoardSize: (value: number) => void;\n  setPlayerNames: (playerNames: PlayerNamesType) => void;\n  setPlayerColorScheme: (playerColorScheme: PlayerColorSchemeType) => void;\n}\n\nexport const defaultSettings = {\n  backgroundColor: '',\n  boardSize: BOARD_SIZES[1].value,\n  playerNames: {\n    [Players.PLAYER_1]: '',\n    [Players.PLAYER_2]: '',\n  },\n  playerColorScheme: PLAYER_COLOR_SCHEMES[0],\n}\n\nexport const SettingsContext = React.createContext({} as ISettingsContextValue);\n\nexport const SettingsContextProvider: React.FC = ({ children }) => {\n  const theme = useTheme();\n  const [state, setState] = useAutoSavedState<ISettingsContextState>(defaultSettings, 'SettingsContext');\n\n  const setBackgroundStyle = useCallback((backgroundStyle?: BackgroundStyleType) => {\n    let backgroundColor: string\n    switch(backgroundStyle) {\n      case 'primary':\n        backgroundColor = theme.palette.primary.main;\n        break;\n      case 'default':\n      default:\n        backgroundColor = theme.palette.grey[400]\n    }\n    setState(state => ({\n      ...state,\n      backgroundColor,\n    }))\n  }, [setState, theme.palette.primary.main, theme.palette.grey])\n\n  const setBoardSize = (boardSize: number) =>\n    setState(state => ({\n      ...state,\n      boardSize,\n    }));\n\n  const setPlayerNames = (playerNames: PlayerNamesType) => {\n    setState(state => ({\n      ...state,\n      playerNames,\n    }));\n  }\n\n  const setPlayerColorScheme = (playerColorScheme: PlayerColorSchemeType) => {\n    setState(state => ({\n      ...state,\n      playerColorScheme,\n    }));\n  }\n\n  return <SettingsContext.Provider value={{\n    ...state,\n    setBackgroundStyle,\n    setBoardSize,\n    setPlayerNames,\n    setPlayerColorScheme,\n  }}>\n    {children}\n  </SettingsContext.Provider>\n}\n","import React, { useCallback, useContext, useEffect } from \"react\"\nimport { clone } from \"lodash-es\";\nimport { Players } from \"../constants\"\nimport { PlayerNamesType, SettingsContext } from \"./SettingsContext\";\nimport { useAutoSavedState } from \"../Hooks\";\n\ninterface IDefaultGameState {\n  turn: Players;\n  isGameOver: boolean;\n  winner: Players | null;\n}\n\ninterface IGameContextState extends IDefaultGameState {\n  squares: Players[];\n}\n\ninterface IGameContextValue extends IGameContextState {\n  startNewGame: (boardSize: number, playerNames: PlayerNamesType) => void;\n  restartGame: () => void;\n  performTurn: (index: number) => void;\n}\n\nexport const GameContext = React.createContext({} as IGameContextValue);\n\nconst defaultGameState: IDefaultGameState = {\n  turn: Players.PLAYER_1,\n  isGameOver: false,\n  winner: null,\n}\n\nexport const GameContextProvider: React.FC = ({ children }) => {\n  const { boardSize, setBoardSize, setPlayerNames } = useContext(SettingsContext);\n  const [state, setState] = useAutoSavedState<IGameContextState>({\n    ...defaultGameState,\n    squares: Array.from(new Array(boardSize * boardSize)),\n  }, 'GameContext');\n\n\n  /**\n   * Counts connected squares of the given player, starting from index i\n   */\n   const getPlayerSquares = useCallback(\n    (player: Players, squares: any[], i: number = 0, usedIndexes: number[] = []): number => {\n      if (squares[i] !== player || usedIndexes.includes(i)) {\n        return 0;\n      }\n      usedIndexes.push(i)\n      return 1 + ((i + 1) % boardSize === 0 ? 0: getPlayerSquares(player, squares, i + 1, usedIndexes))\n        + ((i) % boardSize === 0 ? 0 : getPlayerSquares(player, squares, i - 1, usedIndexes))\n        + getPlayerSquares(player, squares, i - boardSize, usedIndexes)\n        + getPlayerSquares(player, squares, i + boardSize, usedIndexes)\n    }\n  , [boardSize]);\n\n  /**\n   * Finds winner or draw\n   */\n   const getWinner = useCallback((): Players | null => {\n    const max = {\n      [Players.PLAYER_1]: 0,\n      [Players.PLAYER_2]: 0,\n    }\n    state.squares.forEach((player, startIndex) => {\n      const count = getPlayerSquares(player, state.squares, startIndex);\n      if (count > max[player]) {\n        max[player] = count;\n      }\n    })\n    if (max[Players.PLAYER_1] > max[Players.PLAYER_2]) {\n      return Players.PLAYER_1;\n    } else if (max[Players.PLAYER_2] > max[Players.PLAYER_1]) {\n      return Players.PLAYER_2;\n    }\n    return null\n  }, [state.squares, getPlayerSquares])\n\n  useEffect(() => {\n    if (state.squares.every(square => !!square)) {\n      setState(state => ({\n        ...state,\n        isGameOver: true,\n        winner: getWinner(),\n      }))\n    }\n  }, [state.squares, setState, getWinner])\n\n  const toggleTurn = (turn: Players): Players => {\n    if (turn === Players.PLAYER_1) {\n      return Players.PLAYER_2\n    } else {\n      return Players.PLAYER_1\n    }\n  }\n\n  /**\n   * Performs player move, e.g. on clicking the tile\n   * @param index put current player's move in this position\n   */\n  const performTurn = (index: number) => {\n    setState(state => {\n      if (!state.squares[index]) {\n        const tempSquares = clone(state.squares);\n        tempSquares[index] = state.turn;\n        return {\n          ...state,\n          squares: tempSquares,\n          turn: toggleTurn(state.turn),\n        }\n      }\n      return state\n    })\n  }\n\n  const startNewGame = async (boardSize: number, playerNames: PlayerNamesType) => {\n    setBoardSize(boardSize);\n    setPlayerNames(playerNames);\n    setState(state => ({\n      ...state,\n      ...defaultGameState,\n      squares: Array.from(new Array(boardSize * boardSize)),\n    }));\n  }\n\n  const restartGame = () => {\n    setState(state => ({\n      ...state,\n      ...defaultGameState,\n      squares: Array.from(new Array(boardSize * boardSize)),\n    }));\n  }\n\n  return <GameContext.Provider\n    value={{\n      ...state,\n      startNewGame,\n      restartGame,\n      performTurn,\n    }}\n  >\n    {children}\n  </GameContext.Provider>\n}\n","import React, { useContext, useMemo } from \"react\";\nimport { Paper, makeStyles, Theme } from \"@material-ui/core\";\nimport { Players } from \"../constants\";\nimport { useMediaDown } from \"../utils\";\nimport { GameContext, SettingsContext } from \"../contexts\";\n\ninterface ITileProps {\n  index?: number;\n  value?: Players;\n  onClick?: (index: number) => void;\n  size?: number;\n  color?: string;\n  className?: string;\n}\n\ninterface IUseStylesProps {\n  tileSize: number;\n  nextColor: string;\n  tileColor?: string;\n}\n\nconst useStyles = makeStyles<Theme, IUseStylesProps>((theme) => ({\n  paper: ({ tileSize, nextColor, tileColor }) => ({\n    height: tileSize,\n    width: tileSize,\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    backgroundColor: tileColor || theme.palette.common.white,\n    '&.empty:hover': {\n      animationDuration: '200ms',\n      animationName: 'emptyTileHover',\n      animationFillMode: 'forwards',\n      backgroundColor: nextColor,\n    },\n  }),\n}));\n\nexport const Tile: React.FC<ITileProps> = ({ index, size, value, onClick, className, color }) => {\n  const { boardSize, playerColorScheme } = useContext(SettingsContext);\n  const { turn } = useContext(GameContext);\n  const isMobileScreen = useMediaDown('xs');\n  const isSmallMobileScreen = useMediaDown(345);\n  const tileSize = useMemo(\n    () => size || (isMobileScreen ? isSmallMobileScreen ? 245 / boardSize : 300 / boardSize : 530 / boardSize),\n    [size, isMobileScreen, isSmallMobileScreen, boardSize]\n  )\n\n  const classes = useStyles({\n    tileSize,\n    tileColor: color || (value && playerColorScheme[value]),\n    nextColor: playerColorScheme[turn]\n  });\n\n  const handleClick = () => {\n    onClick && index !== undefined && onClick(index)\n  }\n  return (\n    <Paper onClick={handleClick} className={`${classes.paper} ${className}`}></Paper>\n  )\n}","import React from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\nimport { ROUTES } from \"../constants\";\n\ninterface INavigationButtonProps {\n  path?: ROUTES;\n  children: React.ReactNode;\n  onClick?: () => void\n  variant?: \"text\" | \"outlined\" | \"contained\";\n  size?: \"medium\" | \"large\" | \"small\";\n  color?: \"inherit\" | \"primary\" | \"secondary\" | \"default\";\n}\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    width: theme.spacing(25),\n  },\n}))\n\nexport const NavigationButton: React.FC<INavigationButtonProps> = ({\n  path,\n  children,\n  onClick,\n  variant = 'contained',\n  size = 'large',\n  color,\n}) => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  const handleClick = () => {\n    path !== undefined && history.push(path)\n    onClick && onClick()\n  }\n\n  return (\n    <Button\n      onClick={handleClick}\n      className={classes.menuButton}\n      variant={variant}\n      size={size}\n      color={color}\n    >\n      {children}\n    </Button>\n  )\n}","import { Box, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport { Players } from \"../constants\";\nimport { PlayerColorSchemeType, SettingsContext } from \"../contexts\";\nimport { Tile } from \"./Tile\";\n\ninterface IAnimationLogoProps {\n  animate?: boolean;\n  size?: number;\n  colorScheme?: PlayerColorSchemeType;\n  hideTitle?: boolean;\n}\n\nconst useStyles = makeStyles<Theme, { animate?: boolean; size: number; }>((theme) => ({\n  root: ({ animate, size }) => ({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n    height: Math.sqrt(2 * size * size),\n    width: animate ? '100%' : 'auto',\n    [theme.breakpoints.down('sm')]: {\n      width: animate ? '100vw' : 'auto',\n    }\n  }),\n  leftTile: ({ animate }) => ({\n    position: animate ? 'absolute' : 'initial',\n    animation: 'rollToRight',\n    animationDuration: animate ? '1.1s' : '0',\n    animationFillMode: 'forwards',\n  }),\n  rightTile: ({ animate }) => ({\n    position: animate ? 'absolute' : 'initial',\n    animation: 'rollToLeft',\n    animationDuration: animate ? '1s' : '0',\n    animationFillMode: 'forwards',\n  }),\n}));\n\nexport const LogoTiles: React.FC<IAnimationLogoProps> = ({ animate, colorScheme, size = 80, hideTitle = false }) => {\n  const classes = useStyles({ animate, size });\n  const { playerColorScheme } = useContext(SettingsContext)\n  return <Box>\n    <Box className={classes.root}>\n      <Tile\n        size={size}\n        className={classes.leftTile}\n        color={colorScheme ? colorScheme[Players.PLAYER_1] : playerColorScheme[Players.PLAYER_1]}\n      />\n      <Tile\n        size={size}\n        className={classes.rightTile}\n        color={colorScheme ? colorScheme[Players.PLAYER_2] : playerColorScheme[Players.PLAYER_2]}\n      />\n    </Box>\n    {\n      !hideTitle && (\n        <Box mb={2}>\n          <Typography align=\"center\" variant=\"h3\">Squares Game</Typography>\n        </Box>\n      )\n    }\n  </Box>\n}","import { Box, Typography, makeStyles } from \"@material-ui/core\"\nimport { useContext } from \"react\";\nimport { NavigationButton, Tile } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\nimport { getLabel } from \"../../utils\";\n\nconst useStyles = makeStyles(theme => ({\n  gameTurn: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n  },\n  turnTile: {\n    marginRight: theme.spacing(2),\n  },\n  turnLabel: {\n    color: theme.palette.primary.contrastText,\n    '&.gameOver': {\n      color: theme.palette.warning.light,\n    },\n  },\n  navigationButton: {\n    marginTop: theme.spacing(1),\n  },\n  boardOverlay: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'fixed',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 5,\n    background: 'radial-gradient(rgba(0, 0, 0, 0.65), transparent)',\n  },\n  overlayContent: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n}));\n\nexport const GameOverOverlay: React.FC = () => {\n  const { playerNames } = useContext(SettingsContext);\n  const {\n    isGameOver,\n    winner,\n    restartGame\n  } = useContext(GameContext);\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.boardOverlay}>\n      <Box className={classes.overlayContent}>\n        <Box className={classes.gameTurn}>\n          {winner !== null && <Tile className={classes.turnTile} size={34} value={winner}/>}\n          <Typography variant=\"h4\" className={`${classes.turnLabel} ${isGameOver && 'gameOver'}`}>\n            {winner !== null ? `${playerNames[winner] || winner} won!` : 'Game over, Draw'}\n          </Typography>\n        </Box>\n        <Box className={classes.navigationButton}>\n          <NavigationButton onClick={restartGame} color=\"primary\">\n            {getLabel('playAgain')}\n          </NavigationButton>\n        </Box>\n        <Box className={classes.navigationButton}>\n          <NavigationButton path={ROUTES.MENU}>{getLabel('menu')}</NavigationButton>\n        </Box>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useMemo } from \"react\";\nimport { Box, makeStyles, Theme } from \"@material-ui/core\";\nimport { Tile } from \"../../components\";\nimport { Players } from \"../../constants\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\nimport { useMediaDown } from \"../../utils\";\n\nconst useStyles = makeStyles<Theme, { tileMargin: number }>((theme) => ({\n  tileRow: {\n    display: 'flex'\n  },\n  tileContainer: ({ tileMargin }) => ({\n    margin: theme.spacing(tileMargin),\n  }),\n}));\n\nexport const Board: React.FC = () => {\n  const { boardSize } = useContext(SettingsContext);\n  const { squares, performTurn } = useContext(GameContext);\n  const isMobileScreen = useMediaDown('xs');\n  const classes = useStyles({ tileMargin: isMobileScreen ? 0.25 : 0.50 });\n\n  const tiles = useMemo(() => squares.reduce<Players[][]>(\n    (store, value, index) => {\n      const rowIndex = Math.floor(index/boardSize);\n      if (!store[rowIndex]) {\n        store[rowIndex] = [value]\n      } else {\n        store[rowIndex].push(value)\n      }\n      return store\n    },\n  []), [squares, boardSize])\n\n  return (\n    <Box>\n      {\n        tiles.map((row, i) => (\n          <Box key={i} className={classes.tileRow}>\n            {row.map((value, j) => (\n              <Box key={j} className={classes.tileContainer}>\n                <Tile\n                  key={`${i}-${j}`}\n                  index={i * boardSize + j}\n                  value={value}\n                  onClick={performTurn}\n                />\n              </Box>\n            ))}\n          </Box>\n        ))\n      }\n    </Box>\n  )\n}","import React, { useContext, useEffect } from \"react\";\nimport { makeStyles, Theme, Typography, Box } from '@material-ui/core'\nimport { ROUTES } from \"../../constants\";\nimport { NavigationButton, Tile } from \"../../components\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\nimport { getLabel, useMediaDown } from \"../../utils\";\nimport { GameOverOverlay } from \"./GameOverOverlay\";\nimport { Board } from './Board';\n\nconst useStyles = makeStyles<Theme, { tileMargin: number }>((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  gameTurn: ({ tileMargin }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(tileMargin),\n  }),\n  turnTile: {\n    marginRight: theme.spacing(2),\n  },\n  turnLabel: {\n    color: theme.palette.primary.contrastText,\n    '&.gameOver': {\n      color: theme.palette.warning.light,\n    },\n  },\n  navigationButton: ({ tileMargin }) => ({\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(tileMargin),\n  }),\n}));\n\nexport const Game: React.FC = () => {\n  const { setBackgroundStyle, playerNames } = useContext(SettingsContext);\n  const { turn, isGameOver } = useContext(GameContext);\n  const isMobileScreen = useMediaDown('xs');\n  const classes = useStyles({ tileMargin: isMobileScreen ? 0.25 : 0.50 });\n\n  useEffect(() => {\n    setBackgroundStyle('primary');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.gameTurn}>\n        <Tile className={classes.turnTile} size={34} value={turn}/>\n        <Typography variant=\"h4\" className={classes.turnLabel}>\n          {`Turn: ${playerNames[turn] || turn}`}\n        </Typography>\n      </Box>\n      <Board />\n      { isGameOver && <GameOverOverlay /> }\n      <Box className={classes.navigationButton}>\n        <NavigationButton path={ROUTES.MENU}>{getLabel('menu')}</NavigationButton>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect, useMemo } from \"react\";\nimport { makeStyles, Box } from \"@material-ui/core\";\nimport { LogoTiles, NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { getLabel } from \"../../utils\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles((theme) => ({\n  menu: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  menuItem: {\n    marginBottom: theme.spacing(1)\n  },\n}))\n\nexport const Menu: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n  const { squares } = useContext(GameContext)\n  const classes = useStyles();\n  const canResume = useMemo(() => squares.some(square => square), [squares]);\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.menu}>\n      <LogoTiles animate />\n      {\n        canResume &&\n        <Box className={classes.menuItem}>\n          <NavigationButton path={ROUTES.GAME} color=\"primary\">\n            {getLabel('resumeGame')}\n          </NavigationButton>\n        </Box>\n      }\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.GAME_OPTIONS} color={canResume ? 'secondary' : 'primary'}>\n          {getLabel('startGame')}\n        </NavigationButton>\n      </Box>\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.SETTINGS}>\n          {getLabel('settings')}\n        </NavigationButton>\n      </Box>\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.INSTRUCTIONS}>\n          {getLabel('instructions')}\n        </NavigationButton>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport { makeStyles, Box, Button, FormLabel } from \"@material-ui/core\";\nimport { PLAYER_COLOR_SCHEMES, ROUTES } from \"../../constants\";\nimport { LogoTiles, NavigationButton } from \"../../components\";\nimport { getLabel } from \"../../utils\";\nimport { SettingsContext } from \"../../contexts\";\nimport { isEqual } from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap-reverse',\n  },\n  settingsItem: {\n    margin: theme.spacing(1),\n  },\n  colorChooseItem: {\n    padding: theme.spacing(1),\n  }\n}))\n\nexport const Settings: React.FC = () => {\n  const classes = useStyles();\n  const { setBackgroundStyle, playerColorScheme, setPlayerColorScheme } = useContext(SettingsContext);\n  const [colorSchemeIndex, setColorSchemeIndex] = useState(\n    PLAYER_COLOR_SCHEMES.findIndex(colorScheme => isEqual(colorScheme, playerColorScheme))\n  )\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  const handleOnSave = () => {\n    setPlayerColorScheme(PLAYER_COLOR_SCHEMES[colorSchemeIndex]);\n  }\n\n  return (\n    <Box className={classes.root}>\n      <LogoTiles />\n      <Box display=\"flex\">\n        <Box mt={1.5} mr={2}>\n          <FormLabel component=\"legend\">{getLabel('colorScheme')}:</FormLabel>\n        </Box>\n        <Box>\n          {\n            PLAYER_COLOR_SCHEMES.map((colorScheme, index) => (\n              <Box>\n                <Button variant={colorSchemeIndex === index ? 'outlined': 'text'} onClick={() => setColorSchemeIndex(index)}>\n                  <LogoTiles hideTitle size={50} colorScheme={colorScheme}/>\n                </Button>\n              </Box>\n            ))\n          }\n        </Box>\n      </Box>\n      <Box className={classes.buttons}>\n        <Box className={classes.settingsItem}>\n          <NavigationButton path={ROUTES.MENU}>\n            {getLabel('cancel')}\n          </NavigationButton>\n        </Box>\n        <Box className={classes.settingsItem}>\n          <NavigationButton onClick={handleOnSave} path={ROUTES.MENU} color=\"primary\">\n            {getLabel('save')}\n          </NavigationButton>\n        </Box>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect } from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\";\nimport { LogoTiles, NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { getLabel } from \"../../utils\";\nimport { SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n})\n\nexport const Instructions: React.FC = () => {\n  const classes = useStyles();\n  const { setBackgroundStyle } = useContext(SettingsContext);\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return <Box className={classes.root}>\n    <LogoTiles />\n    Instructions page\n\n    <Box>\n        <NavigationButton path={ROUTES.MENU} color=\"primary\">{getLabel('goBack')}</NavigationButton>\n      </Box>\n  </Box>\n}","import React from \"react\";\nimport { Box, FormControlLabel, FormLabel, Radio, RadioGroup } from \"@material-ui/core\";\nimport { BOARD_SIZES } from \"../../constants\";\nimport { getLabel } from \"../../utils\";\n\ninterface IChooseBoardSizeProps {\n  boardSize: number;\n  setBoardSize: (size: number) => void;\n}\n\nexport const ChooseBoardSize: React.FC<IChooseBoardSizeProps> = ({ boardSize, setBoardSize }) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBoardSize(parseInt((event.target as HTMLInputElement).value));\n  };\n\n  return (\n    <Box display=\"flex\">\n      <Box mt={1.5} mr={2}>\n        <FormLabel component=\"legend\">{getLabel('boardSize')}:</FormLabel>\n      </Box>\n      <RadioGroup\n        aria-label={getLabel('chooseBoardSize')}\n        value={boardSize}\n        onChange={handleChange}\n      >\n        {\n          BOARD_SIZES.map(({ value, label }) => (\n            <FormControlLabel\n              key={label}\n              value={value}\n              control={<Radio />}\n              label={getLabel(label)}\n            />\n          ))\n        }\n      </RadioGroup>\n    </Box>\n  )\n}","import React from \"react\";\nimport { Box, makeStyles, TextField } from \"@material-ui/core\";\nimport { Players } from \"../../constants\";\nimport { PlayerNamesType } from \"../../contexts\";\n\ninterface IPlayerNamesProps {\n  playerNames: PlayerNamesType;\n  setPlayerName: (playerNames: Players, name: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  inputs: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  settingsItem: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const PlayerNames: React.FC<IPlayerNamesProps> = ({ playerNames, setPlayerName }) => {\n  const classes = useStyles();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target as HTMLInputElement;\n    setPlayerName(name as Players, value);\n  }\n\n  return (\n    <Box className={classes.inputs}>\n      <Box className={classes.settingsItem}>\n        <TextField\n          name={Players.PLAYER_1}\n          label={Players.PLAYER_1}\n          variant=\"outlined\"\n          value={playerNames[Players.PLAYER_1]}\n          onChange={handleChange}\n        />\n      </Box>\n      <Box className={classes.settingsItem}>\n        <TextField\n          name={Players.PLAYER_2}\n          label={Players.PLAYER_2}\n          variant=\"outlined\"\n          value={playerNames[Players.PLAYER_2]}\n          onChange={handleChange}\n        />\n      </Box>\n    </Box>\n  )\n}","import { Box, makeStyles } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { LogoTiles, NavigationButton } from \"../../components\";\nimport { Players, ROUTES } from \"../../constants\";\nimport { defaultSettings, GameContext, PlayerNamesType, SettingsContext } from \"../../contexts\";\nimport { getLabel } from \"../../utils\";\nimport { ChooseBoardSize } from \"./ChooseBoardSize\";\nimport { PlayerNames } from \"./PlayerNames\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap-reverse',\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const GameOptions: React.FC = () => {\n  const {\n    setBackgroundStyle,\n    playerNames: savedPlayerNames,\n  } = useContext(SettingsContext);\n  const { startNewGame } = useContext(GameContext);\n  const classes = useStyles();\n  const [playerNames, setPlayerNames] = useState<PlayerNamesType>(savedPlayerNames)\n  const [boardSize, setBoardSize] = useState(defaultSettings.boardSize)\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  const setPlayerName = (player: Players, name: string) =>{\n    setPlayerNames(playerNames => ({\n      ...playerNames,\n      [player]: name,\n    }));\n  }\n\n  const handleStartGameClick = () => {\n    startNewGame(boardSize, playerNames);\n  }\n\n  return (\n    <Box className={classes.root}>\n      <LogoTiles />\n      <ChooseBoardSize boardSize={boardSize} setBoardSize={setBoardSize} />\n      <PlayerNames playerNames={playerNames} setPlayerName={setPlayerName}/>\n      <Box className={classes.buttons}>\n        <Box className={classes.button}>\n          <NavigationButton path={ROUTES.MENU}>\n            {getLabel('cancel')}\n          </NavigationButton>\n        </Box>\n        <Box className={classes.button}>\n          <NavigationButton onClick={handleStartGameClick} path={ROUTES.GAME} color=\"primary\">\n            {getLabel('startGame')}\n          </NavigationButton>\n        </Box>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext } from 'react';\nimport { Box, makeStyles, Theme } from '@material-ui/core';\nimport { Game, Menu, Settings, Instructions } from './scenes';\nimport { Route } from 'react-router';\nimport { SettingsContext } from './contexts';\nimport { GameOptions } from './scenes/GameOptions';\nimport { ROUTES } from './constants'\n\nconst useStyles = makeStyles<Theme, { backgroundColor: string }>((theme) => ({\n  mainContainer: ({ backgroundColor }) => ({\n    display: 'flex',\n    overflow: 'auto',\n    width: '100%',\n    minHeight: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor,\n  })\n}));\n\nconst Main: React.FC = () => {\n  const { backgroundColor } = useContext(SettingsContext);\n  const classes = useStyles({ backgroundColor });\n\n  return (\n    <Box className={classes.mainContainer}>\n      <Route exact path={ROUTES.MENU} component={Menu}/>\n      <Route exact path={ROUTES.GAME_OPTIONS} component={GameOptions}/>\n      <Route exact path={ROUTES.GAME} component={Game}/>\n      <Route exact path={ROUTES.SETTINGS} component={Settings}/>\n      <Route exact path={ROUTES.INSTRUCTIONS} component={Instructions}/>\n    </Box>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport { HashRouter as Router } from 'react-router-dom'\nimport { GameContextProvider, SettingsContextProvider } from \"./contexts\";\n\nexport const Providers: React.FC = ({ children }) => {\n  return (\n    <Router>\n      <SettingsContextProvider>\n        <GameContextProvider>\n          {children}\n        </GameContextProvider>\n      </SettingsContextProvider>\n    </Router>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './animations';\nimport Main from './Main';\nimport { Providers } from './Providers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <Main />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}