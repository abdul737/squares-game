{"version":3,"sources":["constants/Routes.ts","constants/GameConstants.ts","constants/MappedLabels.ts","constants/BoardSizes.ts","utils/labelUtils.ts","utils/mediaQueries.ts","contexts/SettingsContext.tsx","contexts/GameContext.tsx","components/Tile.tsx","components/NavigationButton.tsx","components/AnimatedLogo.tsx","scenes/Board/Board.tsx","scenes/Menu/Menu.tsx","scenes/Settings/Settings.tsx","scenes/Instructions/Instructions.tsx","scenes/GameOptions/ChooseBoardSize.tsx","scenes/GameOptions/PlayerNames.tsx","scenes/GameOptions/GameOptions.tsx","Main.tsx","Providers.tsx","index.tsx"],"names":["ROUTES","Players","MAPPED_LABELS","resumeGame","startGame","settings","instructions","goBack","menu","save","cancel","chooseBoardSize","boardSize","x3","x4","x6","x8","BOARD_SIZES","value","label","getLabel","labelName","useMediaDown","breakpoint","theme","useTheme","useMediaQuery","breakpoints","down","SettingsContext","React","createContext","SettingsContextProvider","children","useState","backgroundColor","playerNames","setBackgroundStyle","backgroundStyle","palette","primary","main","grey","setState","state","setBoardSize","setPlayerName","player","name","Provider","GameContext","defaultGameState","turn","PLAYER_1","GameContextProvider","useContext","squares","Array","from","performTurn","index","tempSquares","clone","PLAYER_2","restartGame","useStyles","makeStyles","paper","tileSize","height","width","textAlign","color","text","secondary","success","error","getSquareClassName","Tile","size","onClick","className","isMobileScreen","isSmallMobileScreen","useMemo","classes","Paper","menuButton","spacing","NavigationButton","path","variant","history","useHistory","Button","push","AnimatedLogo","Box","root","display","flexDirection","gameTurn","tileMargin","alignItems","marginBottom","marginLeft","turnTile","marginRight","turnLabel","contrastText","warning","light","navigationButton","marginTop","tileRow","tile","margin","Board","isGameOver","setIsGameOver","winner","setWinner","useEffect","getPlayerSquares","useCallback","i","usedIndexes","includes","getWinner","max","forEach","startIndex","count","every","square","tiles","reduce","store","rowIndex","Math","floor","Typography","map","row","j","MENU","menuItem","Menu","canResume","some","GAME","GAME_OPTIONS","SETTINGS","INSTRUCTIONS","buttons","justifyContent","flexWrap","settingsItem","Settings","Instructions","ChooseBoardSize","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","event","parseInt","target","FormControlLabel","control","Radio","inputs","PlayerNames","handleChange","TextField","button","GameOptions","mainContainer","Main","exact","Providers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61f32730.chunk.js","sourcesContent":["export enum ROUTES {\n  MENU = '/',\n  GAME_OPTIONS = '/game-options',\n  GAME = '/game',\n  SETTINGS = '/settings',\n  INSTRUCTIONS = '/instructions',\n}","export enum Players {\n  PLAYER_1 = 'Player 1',\n  PLAYER_2 = 'Player 2',\n}","export const MAPPED_LABELS = {\n  resumeGame: 'Resume game',\n  startGame: 'Start new game',\n  settings: 'Settings',\n  instructions: 'Instructions',\n  goBack: 'Go back',\n  menu: 'Menu',\n  save: 'Save',\n  cancel: 'Cancel',\n  chooseBoardSize: 'Choose the board size',\n  boardSize: 'Board size',\n  x3: 'Small (3x3)',\n  x4: 'Medium (4x4)',\n  x6: 'Large (6x6)',\n  x8: 'Extra Large (8x8)',\n}","interface IBoardSizeObject {\n  value: number;\n  label: 'x3' | 'x4'| 'x6' | 'x8';\n}\n\nexport const BOARD_SIZES: IBoardSizeObject[] = [\n  {\n    value: 3,\n    label: 'x3',\n  },\n  {\n    value: 4,\n    label: 'x4',\n  },\n  {\n    value: 6,\n    label: 'x6',\n  },\n  {\n    value: 8,\n    label: 'x8',\n  },\n];","import { MAPPED_LABELS } from '../constants'\n\nexport const getLabel = (labelName: keyof typeof MAPPED_LABELS): string => {\n  return MAPPED_LABELS[labelName];\n}","import { useMediaQuery, useTheme } from \"@material-ui/core\";\n\nexport const useMediaUp = (breakpoint: number | 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.up(breakpoint));\n};\n\nexport const useMediaDown = (breakpoint: number | 'xs' | 'sm' | 'md' | 'lg' | 'xl') => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.down(breakpoint));\n};","import { useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\"\nimport { BOARD_SIZES, Players } from \"../constants\";\n\ntype backgroundStyleType = 'primary' | 'default'\n\ninterface IState {\n  backgroundColor: string;\n  boardSize: number;\n  playerNames: { [key in Players]?: string; }\n  setBackgroundStyle: (backgroundStyle?: backgroundStyleType) => void;\n  setBoardSize: (value: number) => void;\n  setPlayerName: (player: Players, name: string) => void;\n}\n\nexport const SettingsContext = React.createContext({} as IState);\n\nexport const SettingsContextProvider: React.FC = ({ children }) => {\n  const theme = useTheme();\n  const [state, setState] = useState<IState>({\n    backgroundColor: '',\n    boardSize: BOARD_SIZES[1].value,\n    playerNames: {},\n    setBackgroundStyle: (backgroundStyle) => {\n      let backgroundColor: string\n      switch(backgroundStyle) {\n        case 'primary':\n          backgroundColor = theme.palette.primary.main;\n          break;\n        case 'default':\n        default:\n          backgroundColor = theme.palette.grey[400]\n      }\n      setState(state => ({\n        ...state,\n        backgroundColor,\n      }))\n    },\n    setBoardSize: (boardSize) =>\n      setState(state => ({\n        ...state,\n        boardSize,\n      })),\n    setPlayerName: (player, name) =>{\n      setState(state => ({\n        ...state,\n        playerNames: {\n          ...state.playerNames,\n          [player]: name,\n        },\n      }));\n    },\n  });\n\n  return <SettingsContext.Provider value={state}>\n    {children}\n  </SettingsContext.Provider>\n}\n","import React, { useContext, useState } from \"react\"\nimport { clone } from \"lodash-es\";\nimport { Players } from \"../constants\"\nimport { SettingsContext } from \"./SettingsContext\";\n\ninterface IDefaultGameState {\n  turn: Players;\n}\n\ninterface IState extends IDefaultGameState {\n  squares: Players[];\n}\n\ninterface IContextProps extends IState {\n  performTurn: (index: number) => void;\n  restartGame: () => void;\n}\n\nexport const GameContext = React.createContext({} as IContextProps);\n\nconst defaultGameState: IDefaultGameState = {\n  turn: Players.PLAYER_1,\n}\n\nexport const GameContextProvider: React.FC = ({ children }) => {\n  const { boardSize } = useContext(SettingsContext);\n  const [state, setState] = useState<IState>({\n    ...defaultGameState,\n    squares: Array.from(new Array(boardSize * boardSize)),\n  });\n\n  const toggleTurn = (turn: Players): Players => {\n    if (turn === Players.PLAYER_1) {\n      return Players.PLAYER_2\n    } else {\n      return Players.PLAYER_1\n    }\n  }\n\n  /**\n   * Performs player move, e.g. on clicking the tile\n   * @param index put current player's move in this position\n   */\n  const performTurn = (index: number) => {\n    setState(state => {\n      if (!state.squares[index]) {\n        const tempSquares = clone(state.squares);\n        tempSquares[index] = state.turn;\n        return {\n          ...state,\n          squares: tempSquares,\n          turn: toggleTurn(state.turn),\n        }\n      }\n      return state\n    })\n  }\n\n  const restartGame = () => {\n    setState(state => ({\n      ...state,\n      ...defaultGameState,\n      squares: Array.from(new Array(boardSize * boardSize)),\n    }));\n  }\n\n  return <GameContext.Provider\n    value={{\n      ...state,\n      performTurn,\n      restartGame,\n    }}\n  >\n    {children}\n  </GameContext.Provider>\n}\n","import React, { useContext, useMemo } from \"react\";\nimport { Paper, makeStyles, Theme } from \"@material-ui/core\";\nimport { Players } from \"../constants\";\nimport { useMediaDown } from \"../utils\";\nimport { SettingsContext } from \"../contexts\";\n\ninterface ITileProps {\n  index?: number;\n  size?: number;\n  value?: Players;\n  onClick?: (index: number) => void;\n  className?: string;\n}\n\nconst useStyles = makeStyles<Theme, { tileSize: number; }>((theme) => ({\n  paper: ({ tileSize }) => ({\n    height: tileSize,\n    width: tileSize,\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    '&.Player1': {\n      backgroundColor: theme.palette.success.main,\n    },\n    '&.Player2': {\n      backgroundColor: theme.palette.error.main,\n    }\n  }),\n}));\n\nconst getSquareClassName = (value?: Players) => {\n  if (value === Players.PLAYER_1) {\n    return 'Player1'\n  } else if (value === Players.PLAYER_2) {\n    return 'Player2'\n  }\n  return ''\n}\n\nexport const Tile: React.FC<ITileProps> = ({ index, size, value, onClick, className }) => {\n  const { boardSize } = useContext(SettingsContext);\n  const isMobileScreen = useMediaDown('xs');\n  const isSmallMobileScreen = useMediaDown(345);\n  const tileSize = useMemo(\n    () => size || (isMobileScreen ? isSmallMobileScreen ? 245 / boardSize : 300 / boardSize : 530 / boardSize),\n    [size, isMobileScreen, isSmallMobileScreen, boardSize]\n  )\n\n  const classes = useStyles({ tileSize });\n\n  const handleClick = () => {\n    onClick && index && onClick(index)\n  }\n  return (\n    <Paper onClick={handleClick} className={`${classes.paper} ${getSquareClassName(value)} ${className}`}></Paper>\n  )\n}","import React from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\nimport { ROUTES } from \"../constants\";\n\ninterface INavigationButtonProps {\n  path: ROUTES;\n  children: React.ReactNode;\n  onClick?: () => void\n  variant?: \"text\" | \"outlined\" | \"contained\";\n  size?: \"medium\" | \"large\" | \"small\";\n  color?: \"inherit\" | \"primary\" | \"secondary\" | \"default\";\n}\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    width: theme.spacing(25),\n  },\n}))\n\nexport const NavigationButton: React.FC<INavigationButtonProps> = ({\n  path,\n  children,\n  onClick,\n  variant = 'contained',\n  size = 'large',\n  color,\n}) => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  const handleClick = () => {\n    history.push(path)\n    onClick && onClick()\n  }\n\n  return (\n    <Button\n      onClick={handleClick}\n      className={classes.menuButton}\n      variant={variant}\n      size={size}\n      color={color}\n    >\n      {children}\n    </Button>\n  )\n}","import { Box } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Players } from \"../constants\";\nimport { Tile } from \"./Tile\";\n\nexport const AnimatedLogo: React.FC = () => {\n  return <Box>\n    <Tile value={Players.PLAYER_1}/>\n    <Tile value={Players.PLAYER_2}/>\n  </Box>\n}","import React, { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { makeStyles, Theme, Typography, Box } from '@material-ui/core'\nimport { Players, ROUTES } from \"../../constants\";\nimport { NavigationButton, Tile } from \"../../components\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\nimport { getLabel, useMediaDown } from \"../../utils\";\n\nconst useStyles = makeStyles<Theme, { tileMargin: number }>((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  gameTurn: ({ tileMargin }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(tileMargin),\n  }),\n  turnTile: {\n    marginRight: theme.spacing(2),\n  },\n  turnLabel: {\n    color: theme.palette.primary.contrastText,\n    '&.gameOver': {\n      color: theme.palette.warning.light,\n    },\n  },\n  navigationButton: ({ tileMargin }) => ({\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(tileMargin),\n  }),\n  tileRow: {\n    display: 'flex'\n  },\n  tile: ({ tileMargin }) => ({\n    margin: theme.spacing(tileMargin),\n  }),\n}));\n\nexport const Board: React.FC = () => {\n  const { setBackgroundStyle, boardSize, playerNames } = useContext(SettingsContext);\n  const { squares, turn, performTurn } = useContext(GameContext);\n  const isMobileScreen = useMediaDown('xs');\n  const classes = useStyles({ tileMargin: isMobileScreen ? 0.25 : 0.50 });\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winner, setWinner] = useState<Players | 'Draw'>('Draw')\n\n  useEffect(() => {\n    setBackgroundStyle('primary');\n  }, [setBackgroundStyle])\n\n  /**\n   * Counts connected squares of the given player, starting from index i\n   */\n  const getPlayerSquares = useCallback(\n    (player: Players, squares: any[], i: number = 0, usedIndexes: number[] = []): number => {\n      if (squares[i] !== player || usedIndexes.includes(i)) {\n        return 0;\n      }\n      usedIndexes.push(i)\n      return 1 + ((i + 1) % boardSize === 0 ? 0: getPlayerSquares(player, squares, i + 1, usedIndexes))\n        + ((i) % boardSize === 0 ? 0 : getPlayerSquares(player, squares, i - 1, usedIndexes))\n        + getPlayerSquares(player, squares, i - boardSize, usedIndexes)\n        + getPlayerSquares(player, squares, i + boardSize, usedIndexes)\n    }\n  , [boardSize]);\n\n  /**\n   * Finds winner or draw\n   */\n  const getWinner = useCallback((): Players | 'Draw' => {\n    const max = {\n      [Players.PLAYER_1]: 0,\n      [Players.PLAYER_2]: 0,\n    }\n    squares.forEach((player, startIndex) => {\n      const count = getPlayerSquares(player, squares, startIndex);\n      if (count > max[player]) {\n        max[player] = count;\n      }\n    })\n    if (max[Players.PLAYER_1] > max[Players.PLAYER_2]) {\n      return Players.PLAYER_1;\n    } else if (max[Players.PLAYER_2] > max[Players.PLAYER_1]) {\n      return Players.PLAYER_2;\n    }\n    return 'Draw'\n  }, [squares, getPlayerSquares])\n\n  useEffect(() => {\n    if (squares.every(square => !!square)) {\n      setWinner(getWinner())\n      setIsGameOver(true)\n    }\n  }, [squares, getWinner])\n\n  const tiles = useMemo(() => squares.reduce<Players[][]>(\n    (store, value, index) => {\n      const rowIndex = Math.floor(index/boardSize);\n      if (!store[rowIndex]) {\n        store[rowIndex] = [value]\n      } else {\n        store[rowIndex].push(value)\n      }\n      return store\n    },\n  []), [squares, boardSize])\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.gameTurn}>\n        {\n          isGameOver ?\n            winner !== 'Draw' && <Tile className={classes.turnTile} size={34} value={winner}/>\n            : <Tile className={classes.turnTile} size={34} value={turn}/>\n        }\n        <Typography variant=\"h4\" className={`${classes.turnLabel} ${isGameOver && 'gameOver'}`}>\n          {\n            isGameOver ?\n              winner !== 'Draw' ? `${playerNames[winner] || winner} won!` : 'Game over, Draw'\n              : `Turn: ${playerNames[turn] || turn}`\n          }\n        </Typography>\n      </Box>\n      <Box>\n        {\n          tiles.map((row, i) => (\n            <Box key={i} className={classes.tileRow}>\n              {row.map((value, j) => (\n                <Box key={j} className={classes.tile}>\n                  <Tile\n                    key={`${i}-${j}`}\n                    index={i * boardSize + j}\n                    value={value}\n                    onClick={performTurn}\n                  />\n                </Box>\n              ))}\n            </Box>\n          ))\n        }\n      </Box>\n      <Box className={classes.navigationButton}>\n        <NavigationButton path={ROUTES.MENU}>{getLabel('menu')}</NavigationButton>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect, useMemo } from \"react\";\nimport { makeStyles, Box } from \"@material-ui/core\";\nimport { AnimatedLogo, NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { getLabel } from \"../../utils\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles((theme) => ({\n  menu: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  menuItem: {\n    marginTop: theme.spacing(1)\n  },\n}))\n\nexport const Menu: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n  const { squares } = useContext(GameContext)\n  const classes = useStyles();\n  const canResume = useMemo(() => squares.some(square => square), [squares]);\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.menu}>\n      <AnimatedLogo />\n      {\n        canResume &&\n        <Box className={classes.menuItem}>\n          <NavigationButton path={ROUTES.GAME} color=\"primary\">\n            {getLabel('resumeGame')}\n          </NavigationButton>\n        </Box>\n      }\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.GAME_OPTIONS} color={canResume ? 'secondary' : 'primary'}>\n          {getLabel('startGame')}\n        </NavigationButton>\n      </Box>\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.SETTINGS}>\n          {getLabel('settings')}\n        </NavigationButton>\n      </Box>\n      <Box className={classes.menuItem}>\n        <NavigationButton path={ROUTES.INSTRUCTIONS}>\n          {getLabel('instructions')}\n        </NavigationButton>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect } from \"react\";\nimport { makeStyles, TextField, Box } from \"@material-ui/core\";\nimport { Players, ROUTES } from \"../../constants\";\nimport { NavigationButton } from \"../../components\";\nimport { getLabel } from \"../../utils\";\nimport { SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap-reverse',\n  },\n  settingsItem: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const Settings: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n  const classes = useStyles();\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.buttons}>\n        <Box className={classes.settingsItem}>\n          <NavigationButton path={ROUTES.MENU}>{getLabel('cancel')}</NavigationButton>\n        </Box>\n        <Box className={classes.settingsItem}>\n          <NavigationButton path={ROUTES.MENU} color=\"primary\">{getLabel('save')}</NavigationButton>\n        </Box>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext, useEffect } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { getLabel } from \"../../utils\";\nimport { SettingsContext } from \"../../contexts\";\n\nexport const Instructions: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return <Box>\n    Instructions page\n\n    <Box>\n        <NavigationButton path={ROUTES.MENU} color=\"primary\">{getLabel('goBack')}</NavigationButton>\n      </Box>\n  </Box>\n}","import React, { useContext } from \"react\";\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from \"@material-ui/core\";\nimport { BOARD_SIZES } from \"../../constants\";\nimport { SettingsContext } from \"../../contexts\";\nimport { getLabel } from \"../../utils\";\n\nexport const ChooseBoardSize: React.FC = () => {\n  const { boardSize, setBoardSize } = useContext(SettingsContext);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBoardSize(parseInt((event.target as HTMLInputElement).value));\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{getLabel('boardSize')}:</FormLabel>\n      <RadioGroup\n        aria-label={getLabel('chooseBoardSize')}\n        value={boardSize}\n        onChange={handleChange}\n      >\n        {\n          BOARD_SIZES.map(({ value, label }) => (\n            <FormControlLabel\n              key={label}\n              value={value}\n              control={<Radio />}\n              label={getLabel(label)}\n            />\n          ))\n        }\n      </RadioGroup>\n    </FormControl>\n  )\n}","import React, { useContext } from \"react\";\nimport { Box, makeStyles, TextField } from \"@material-ui/core\";\nimport { Players } from \"../../constants\";\nimport { SettingsContext } from \"../../contexts\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputs: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  settingsItem: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const PlayerNames: React.FC = () => {\n  const { playerNames, setPlayerName } = useContext(SettingsContext);\n  const classes = useStyles();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target as HTMLInputElement;\n    setPlayerName(name as Players, value);\n  }\n\n  return (\n    <Box className={classes.inputs}>\n      <Box className={classes.settingsItem}>\n        <TextField\n          name={Players.PLAYER_1}\n          label={Players.PLAYER_1}\n          variant=\"outlined\"\n          value={playerNames[Players.PLAYER_1]}\n          onChange={handleChange}\n        />\n      </Box>\n      <Box className={classes.settingsItem}>\n        <TextField\n          name={Players.PLAYER_2}\n          label={Players.PLAYER_2}\n          variant=\"outlined\"\n          value={playerNames[Players.PLAYER_2]}\n          onChange={handleChange}\n        />\n      </Box>\n    </Box>\n  )\n}","import { Box, makeStyles } from \"@material-ui/core\";\nimport React, { useContext, useEffect } from \"react\";\nimport { NavigationButton } from \"../../components\";\nimport { ROUTES } from \"../../constants\";\nimport { GameContext, SettingsContext } from \"../../contexts\";\nimport { getLabel } from \"../../utils\";\nimport { ChooseBoardSize } from \"./ChooseBoardSize\";\nimport { PlayerNames } from \"./PlayerNames\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  buttons: {\n    display: 'flex',\n    margin: theme.spacing(1),\n    justifyContent: 'center',\n    flexWrap: 'wrap-reverse',\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport const GameOptions: React.FC = () => {\n  const { setBackgroundStyle } = useContext(SettingsContext);\n  const { restartGame } = useContext(GameContext)\n  const classes = useStyles();\n\n  useEffect(() => {\n    setBackgroundStyle('default');\n  }, [setBackgroundStyle])\n\n  return (\n    <Box className={classes.root}>\n      <ChooseBoardSize />\n      <PlayerNames />\n      <Box className={classes.buttons}>\n        <Box className={classes.button}>\n          <NavigationButton path={ROUTES.MENU}>{getLabel('goBack')}</NavigationButton>\n        </Box>\n        <Box className={classes.button}>\n          <NavigationButton onClick={restartGame} path={ROUTES.GAME} color=\"primary\">{getLabel('startGame')}</NavigationButton>\n        </Box>\n      </Box>\n    </Box>\n  )\n}","import React, { useContext } from 'react';\nimport { Box, makeStyles, Theme } from '@material-ui/core';\nimport { Board, Menu, Settings, Instructions } from './scenes';\nimport { Route } from 'react-router';\nimport { SettingsContext } from './contexts';\nimport { GameOptions } from './scenes/GameOptions';\nimport { ROUTES } from './constants'\n\nconst useStyles = makeStyles<Theme, { backgroundColor: string }>((theme) => ({\n  mainContainer: ({ backgroundColor }) => ({\n    display: 'flex',\n    height: '100%',\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor,\n  })\n}));\n\nconst Main: React.FC = () => {\n  const { backgroundColor } = useContext(SettingsContext);\n  const classes = useStyles({ backgroundColor });\n\n  return (\n    <Box className={classes.mainContainer}>\n      <Route exact path={ROUTES.MENU} component={Menu}/>\n      <Route exact path={ROUTES.GAME_OPTIONS} component={GameOptions}/>\n      <Route exact path={ROUTES.GAME} component={Board}/>\n      <Route exact path={ROUTES.SETTINGS} component={Settings}/>\n      <Route exact path={ROUTES.INSTRUCTIONS} component={Instructions}/>\n    </Box>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport { HashRouter as Router } from 'react-router-dom'\nimport { GameContextProvider, SettingsContextProvider } from \"./contexts\";\n\nexport const Providers: React.FC = ({ children }) => {\n  return (\n    <Router>\n      <SettingsContextProvider>\n        <GameContextProvider>\n          {children}\n        </GameContextProvider>\n      </SettingsContextProvider>\n    </Router>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport { Providers } from './Providers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <Main />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}